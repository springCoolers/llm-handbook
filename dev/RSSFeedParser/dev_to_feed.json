{
  "feed_url": "https://dev.to/feed",
  "site_url": "https://dev.to",
  "title": "DEV Community",
  "fetch_date": "2025-03-08 19:06:00",
  "entries_count": 12,
  "entries": [
    {
      "title": "4 Ways to Deploy any LLM on Hugging Face every developer should know",
      "link": "https://dev.to/aigurux/4-ways-to-deploy-any-llm-on-hugging-face-every-developer-should-know-5217",
      "published": "Sat, 08 Mar 2025 09:48:16 +0000",
      "author": "AIGuruX",
      "tags": [],
      "text": "Hugging Face is a wonderful platform for sharing AI models, datasets, and knowledge. However, it can sometimes feel overwhelming for newcomers—and even experts—to stay up to date with all the latest news and amazing capabilities. In previous posts, I discussed a few features I find very valuable for AI developers in general. \n\nThis time, we’ll focus on a specific but fundamental part of any AI solution: **inference**. When you find a great model on Hugging Face that you want to use, the immediate questions are: **How can I use it?** and **How much will it cost?**\n\nMany of you might already have experimented with models in Hugging Face Spaces—such as Llama 3B, Flux Schnell, and thousands of others—where you can simply type a question into the Space and start using it right away. That’s a great way to explore a model’s abilities. But actually using and integrating a model into your own application is another story.\n\nSome people may also be familiar with the Transformers library, which can pull these models directly into your application. This is great, but it can require expensive hardware for large models, and it's only a fraction of what Hugging Face offers in terms of inference.\n\nIn this post I will talk about four alternative ways of using models on Hugging Face. Whether the model is small or large, there is always a solution.\n\n## 1. Dedicated Endpoint\n\nA **dedicated endpoint** allows you to reserve and rent specific hardware to deploy the selected model on various cloud providers, managed by Hugging Face. This hardware deployment can provide an OpenAI-compatible endpoint for your application if you want. Depending on the size of the model, you may need expensive hardware with GPUs.\n\n>> Read more in my Blog Post",
      "html": "<p>Hugging Face is a wonderful platform for sharing AI models, datasets, and knowledge. However, it can sometimes feel overwhelming for newcomers—and even experts—to stay up to date with all the latest news and amazing capabilities. In previous posts, I discussed a few features I find very valuable for AI developers in general. </p>\n\n<p>This time, we’ll focus on a specific but fundamental part of any AI solution: <strong>inference</strong>. When you find a great model on Hugging Face that you want to use, the immediate questions are: <strong>How can I use it?</strong> and <strong>How much will it cost?</strong></p>\n\n<p>Many of you might already have experimented with models in Hugging Face Spaces—such as Llama 3B, Flux Schnell, and thousands of others—where you can simply type a question into the Space and start using it right away. That’s a great way to explore a model’s abilities. But actually using and integrating a model into your own application is another story.</p>\n\n<p>Some people may also be familiar with the Transformers library, which can pull these models directly into your application. This is great, but it can require expensive hardware for large models, and it's only a fraction of what Hugging Face offers in terms of inference.</p>\n\n<p>In this post I will talk about four alternative ways of using models on Hugging Face. Whether the model is small or large, there is always a solution.</p>\n\n\n\n\n<h2>\n  \n  \n  1. Dedicated Endpoint\n</h2>\n\n<p>A <strong>dedicated endpoint</strong> allows you to reserve and rent specific hardware to deploy the selected model on various cloud providers, managed by Hugging Face. This hardware deployment can provide an OpenAI-compatible endpoint for your application if you want. Depending on the size of the model, you may need expensive hardware with GPUs.</p>\n\n<p><a href=\"https://airabbit.blog/4-ways-to-deploy-any-llm-on-hugging-face-every-developer-should-know/\" rel=\"noopener noreferrer\">&gt;&gt; Read more in my Blog Post</a></p>"
    },
    {
      "title": "Odoo Payment Gateway Integration: Transactions Not Processing",
      "link": "https://dev.to/james_scott_bf1d5c8cfcaa0/odoo-payment-gateway-integration-transactions-not-processing-69a",
      "published": "Sat, 08 Mar 2025 09:44:28 +0000",
      "author": "James Scott",
      "tags": [
        "odoopayment",
        "stripe",
        "odooecommerce",
        "transactiondebugging"
      ],
      "text": "**Question** \n\nI integrated a payment gateway (Stripe/PayPal) in Odoo, but transactions are failing. How can I debug this?\n\n**Problem**\n\nTransactions are failing due to incorrect API configuration, missing credentials, or webhook issues.\n\n**Solution**\n\nCheck logs:\n\n```\ntail -f /var/log/odoo/odoo-server.log\n```\n\nEnsure API credentials are correct in payment.acquirer.\n\nTest with a sandbox environment before going live.\n\nImplement logging in Python:\n\n```\n_logger = logging.getLogger(__name__)\n_logger.info(\"Payment request sent: %s\", payload)\n```\n\nIf using webhooks, verify endpoints in Payment Settings > Webhooks.\n\nBuild secure, scalable, and feature-rich platforms tailored to your business needs. From custom module development to multi-company management, get end-to-end solutions for your Odoo implementation project. Let’s streamline your business operations and drive efficiency with Odoo Implementation Services.",
      "html": "<p><strong>Question</strong> </p>\n\n<p>I integrated a payment gateway (Stripe/PayPal) in Odoo, but transactions are failing. How can I debug this?</p>\n\n<p><strong>Problem</strong></p>\n\n<p>Transactions are failing due to incorrect API configuration, missing credentials, or webhook issues.</p>\n\n<p><strong>Solution</strong></p>\n\n<ul>\n<li>Check logs:\n<code>bash</code>\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>tail -f /var/log/odoo/odoo-server.log\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Ensure API credentials are correct in payment.acquirer.</li>\n<li>Test with a sandbox environment before going live.</li>\n<li>Implement logging in Python:\n<code>python</code>\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>_logger = logging.getLogger(__name__)\n_logger.info(\"Payment request sent: %s\", payload)\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>If using webhooks, verify endpoints in Payment Settings &gt; Webhooks.</li>\n</ul>\n\n<p>Build secure, scalable, and feature-rich platforms tailored to your business needs. From custom module development to multi-company management, get end-to-end solutions for your Odoo implementation project. Let’s streamline your business operations and drive efficiency with <a href=\"https://sdlccorp.com/services/odoo-services/odoo-implementation-services/\" rel=\"noopener noreferrer\">Odoo Implementation Services</a>.</p>"
    },
    {
      "title": "Authentication in nextjs app-router using Auth.js v5 with Credentials",
      "link": "https://dev.to/venumarious/authentication-in-nextjs-app-router-using-authjs-v5-with-credentials-47ji",
      "published": "Sat, 08 Mar 2025 09:42:07 +0000",
      "author": "Sayed Isa",
      "tags": [
        "nextjs",
        "authjs",
        "beginners",
        "typescript"
      ],
      "text": "Code: next-auth-dashboard",
      "html": "<p>Code: <a href=\"https://github.com/isasayed/next-auth-dashboard\" rel=\"noopener noreferrer\">next-auth-dashboard</a></p>"
    },
    {
      "title": "Performance Issues in Odoo: Slow Loading on Large Datasets",
      "link": "https://dev.to/james_scott_bf1d5c8cfcaa0/performance-issues-in-odoo-slow-loading-on-large-datasets-3f39",
      "published": "Sat, 08 Mar 2025 09:36:47 +0000",
      "author": "James Scott",
      "tags": [
        "odooperformance",
        "optimization",
        "postgressql",
        "odoospeed"
      ],
      "text": "**Question**\n\nMy Odoo app is running slow when fetching large records. How do I optimize performance?\n\n**Problem**\n\nQueries retrieving large datasets result in slow loading times, causing UI lag.\n\n**Solution**\n\nUse indexed fields for search operations (`_rec_name, default_order`).\n\nBatch process large queries instead of loading all at once.\n\nUse SQL queries for optimized filtering.\n\nLazy Load Records with pagination:\n\n```\n@api.model\ndef get_paginated_records(self, offset=0, limit=50):\n return self.search([], offset=offset, limit=limit)\n```\n\nBuild secure, scalable, and feature-rich platforms tailored to your business needs. From custom module development to multi-company management, get end-to-end solutions for your Odoo implementation project. Let’s streamline your business operations and drive efficiency with Odoo Implementation Services.",
      "html": "<p><strong>Question</strong></p>\n\n<p>My Odoo app is running slow when fetching large records. How do I optimize performance?</p>\n\n<p><strong>Problem</strong></p>\n\n<p>Queries retrieving large datasets result in slow loading times, causing UI lag.</p>\n\n<p><strong>Solution</strong></p>\n\n<ul>\n<li>Use indexed fields for search operations (<code>_rec_name, default_order</code>).</li>\n<li>Batch process large queries instead of loading all at once.</li>\n<li>Use SQL queries for optimized filtering.</li>\n<li>Lazy Load Records with pagination:\n<code>python</code>\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>@api.model\ndef get_paginated_records(self, offset=0, limit=50):\n    return self.search([], offset=offset, limit=limit)\n</code></pre>\n\n</div>\n\n\n\n<p>Build secure, scalable, and feature-rich platforms tailored to your business needs. From custom module development to multi-company management, get end-to-end solutions for your Odoo implementation project. Let’s streamline your business operations and drive efficiency with <a href=\"https://sdlccorp.com/services/odoo-services/odoo-implementation-services/\" rel=\"noopener noreferrer\">Odoo Implementation Services</a>.</p>"
    },
    {
      "title": "Prompt Management and Versioning with Jinja and SQLite",
      "link": "https://dev.to/mayank_laddha_ml/prompt-management-and-versioning-with-jinja-and-sqlite-24nj",
      "published": "Sat, 08 Mar 2025 09:32:57 +0000",
      "author": "Mayank Laddha",
      "tags": [
        "ai",
        "promptengineering",
        "python",
        "rag"
      ],
      "text": "By leveraging Jinja2 for templating and SQLite for storage, we can create a flexible system to write and track prompts efficiently.\n\n**Why Jinja for Prompt Templating?**\n\nJinja2 is a powerful templating engine that allows for dynamic prompt generation. Instead of hardcoding multiple prompt variations, Jinja enables:\n\n✅ Reusability – Define a single template and adjust variables as needed.\n\n✅ Conditional Logic – Include or exclude sections based on context.\n\n✅ Loops and Filters – Modify and iterate over data dynamically.\n\n**Versioning Prompts with SQLite**\n\nManually tracking different prompt versions is inefficient. Instead, SQLite provides a lightweight solution to store and manage prompts along with metadata such as:\n\n📌 Version number – Track improvements over time.\n\n📌 Scores & Comments – Evaluate which prompts perform best.\n\n📌 Production Status – Mark the best-performing prompt for deployment.\n\nHere is a simple implementation of the concept:\n\nLink to the repo",
      "html": "<p>By leveraging Jinja2 for templating and SQLite for storage, we can create a flexible system to write and track prompts efficiently.</p>\n\n<p><strong>Why Jinja for Prompt Templating?</strong><br />\nJinja2 is a powerful templating engine that allows for dynamic prompt generation. Instead of hardcoding multiple prompt variations, Jinja enables:</p>\n\n<p>✅ Reusability – Define a single template and adjust variables as needed.<br />\n✅ Conditional Logic – Include or exclude sections based on context.<br />\n✅ Loops and Filters – Modify and iterate over data dynamically.</p>\n\n<p><strong>Versioning Prompts with SQLite</strong><br />\nManually tracking different prompt versions is inefficient. Instead, SQLite provides a lightweight solution to store and manage prompts along with metadata such as:</p>\n\n<p>📌 Version number – Track improvements over time.<br />\n📌 Scores &amp; Comments – Evaluate which prompts perform best.<br />\n📌 Production Status – Mark the best-performing prompt for deployment.</p>\n\n<p>Here is a simple implementation of the concept:<br />\n<a href=\"https://github.com/maylad31/jinja-prompt-manager\" rel=\"noopener noreferrer\">Link to the repo</a></p>"
    },
    {
      "title": "MERN vs. PERN: A Comparative Analysis of Full-Stack Architectures",
      "link": "https://dev.to/raajaryan/mern-vs-pern-a-comparative-analysis-of-full-stack-architectures-3aga",
      "published": "Sat, 08 Mar 2025 09:28:09 +0000",
      "author": "Deepak Kumar",
      "tags": [
        "javascript",
        "webdev",
        "beginners",
        "programming"
      ],
      "text": "## Introduction\n\nIn contemporary web development, the selection of an appropriate technology stack is a critical determinant of a project's scalability, maintainability, and performance. Two widely adopted full-stack architectures, **MERN** and **PERN**, offer distinct advantages and trade-offs, particularly in the context of database selection. This article presents an in-depth analysis of these stacks, highlighting their structural composition, practical applications, and suitability for various use cases.\n\n## Understanding Technology Stacks\n\nA **technology stack** comprises a collection of technologies that function in concert to facilitate software application development. This includes the database layer, server-side logic, client-side interface, and runtime environment. \n\nBoth **MERN** and **PERN** stacks leverage JavaScript as the core programming language for full-stack application development; however, the primary distinction between them lies in their database paradigms:\n\n**MERN**: Utilizes **MongoDB**, a NoSQL document-oriented database.\n\n**PERN**: Implements **PostgreSQL**, a relational database management system (RDBMS).\n\nTo comprehend their implications, we shall examine each stack’s components and analyze their real-world applicability.\n\n## MERN Stack: Architectural Overview\n\n### Composition\n\nThe MERN stack consists of the following technologies:\n\n**MongoDB (Database)** – A NoSQL database that stores data in a flexible, JSON-like schema.\n\n**Express.js (Backend Framework)** – A lightweight web application framework for managing server-side operations.\n\n**React.js (Frontend Library)** – A declarative and component-based JavaScript library for building dynamic user interfaces.\n\n**Node.js (Runtime Environment)** – A server-side runtime that enables JavaScript execution outside the browser.\n\n### Practical Implementation: Social Media Application\n\nConsider a **social networking platform** analogous to Instagram:\n\n**MongoDB** efficiently stores dynamic user-generated content, including posts, likes, and comments, in a non-relational schema.\n\n**Express.js** facilitates API development, enabling data retrieval and interaction between the client and server.\n\n**React.js** provides a highly responsive, component-driven user interface for profile management, real-time notifications, and interactive feeds.\n\n**Node.js** ensures seamless execution of backend operations, including authentication and media uploads.\n\n### Use Case Justification\n\nMERN is particularly advantageous for applications where:\n\nData is frequently evolving, dynamic, and semi-structured.\n\nScalability and flexibility outweigh rigid schema enforcement.\n\nA unified JavaScript-based development approach is preferred across the stack.\n\n## PERN Stack: Architectural Overview\n\n### Composition\n\nThe PERN stack comprises:\n\n**PostgreSQL (Database)** – A powerful SQL-based relational database offering ACID compliance.\n\n**Express.js (Backend Framework)** – Facilitates API and middleware development.\n\n**React.js (Frontend Library)** – Ensures modular and interactive UI design.\n\n**Node.js (Runtime Environment)** – Supports asynchronous execution of backend operations.\n\n### Practical Implementation: E-Commerce Platform\n\nA **digital marketplace** akin to Amazon can effectively leverage the PERN stack:\n\n**PostgreSQL** enforces structured data storage, maintaining transactional integrity across product inventories, user accounts, and payment records.\n\n**Express.js** streamlines backend operations, ensuring secure user authentication and checkout procedures.\n\n**React.js** enhances user experience by providing dynamic filtering, personalized recommendations, and an optimized shopping cart.\n\n**Node.js** underpins asynchronous operations, facilitating real-time data synchronization.\n\n### Use Case Justification\n\nPERN is ideal for scenarios where:\n\n**Data consistency and relational integrity** are paramount.\n\n**Complex SQL queries** are necessary for analytics and reporting.\n\n**Transactional reliability** (e.g., financial applications, e-commerce) is a fundamental requirement.\n\n## Comparative Analysis: MERN vs. PERN\n\nAttribute\nMERN Stack\nPERN Stack\n\n**Database Type**\nNoSQL (MongoDB)\nSQL (PostgreSQL)\n\n**Data Structure**\nFlexible, schema-less\nRelational, structured\n\n**Ideal For**\nSocial media, real-time apps, content platforms\nE-commerce, finance, inventory systems\n\n**Scalability**\nOptimized for horizontal scaling\nEfficient for structured data growth\n\n**Data Integrity**\nLess strict, suitable for semi-structured data\nACID-compliant, ensures transactional consistency\n\n**Query Efficiency**\nSimplified, JSON-based\nSupports complex SQL queries\n\n**Learning Curve**\nEasier for JavaScript developers\nRequires SQL proficiency\n\n## Strategic Considerations: Which Stack to Choose?\n\n### MERN Stack Preference\n\nRecommended for applications requiring high scalability, such as content-driven platforms and real-time data synchronization.\n\nIdeal for developers seeking a seamless JavaScript environment across frontend and backend.\n\n### PERN Stack Preference\n\nOptimal for applications necessitating structured data relationships and transactional integrity.\n\nPreferred for domains involving regulatory compliance, such as financial technology and enterprise resource planning (ERP) systems.\n\n## Conclusion\n\nThe selection between MERN and PERN is contingent on the specific functional and technical requirements of a given project. While MERN offers unparalleled flexibility and rapid development cycles, PERN ensures robust data integrity and advanced query capabilities. Understanding the nuances of each stack enables developers to make informed architectural decisions aligned with their project’s objectives.\n\nWhich stack aligns best with your development needs? Share your insights in the comments below!",
      "html": "<h2>\n  \n  \n  <strong>Introduction</strong>\n</h2>\n\n<p>In contemporary web development, the selection of an appropriate technology stack is a critical determinant of a project's scalability, maintainability, and performance. Two widely adopted full-stack architectures, <strong>MERN</strong> and <strong>PERN</strong>, offer distinct advantages and trade-offs, particularly in the context of database selection. This article presents an in-depth analysis of these stacks, highlighting their structural composition, practical applications, and suitability for various use cases.</p>\n\n\n\n\n<h2>\n  \n  \n  <strong>Understanding Technology Stacks</strong>\n</h2>\n\n<p>A <strong>technology stack</strong> comprises a collection of technologies that function in concert to facilitate software application development. This includes the database layer, server-side logic, client-side interface, and runtime environment. </p>\n\n<p>Both <strong>MERN</strong> and <strong>PERN</strong> stacks leverage JavaScript as the core programming language for full-stack application development; however, the primary distinction between them lies in their database paradigms:</p>\n\n<ul>\n<li>\n<strong>MERN</strong>: Utilizes <strong>MongoDB</strong>, a NoSQL document-oriented database.</li>\n<li>\n<strong>PERN</strong>: Implements <strong>PostgreSQL</strong>, a relational database management system (RDBMS).</li>\n</ul>\n\n<p>To comprehend their implications, we shall examine each stack’s components and analyze their real-world applicability.</p>\n\n\n\n\n<h2>\n  \n  \n  <strong>MERN Stack: Architectural Overview</strong>\n</h2>\n\n<h3>\n  \n  \n  <strong>Composition</strong>\n</h3>\n\n<p>The MERN stack consists of the following technologies:</p>\n\n<ol>\n<li>\n<strong>MongoDB (Database)</strong> – A NoSQL database that stores data in a flexible, JSON-like schema.</li>\n<li>\n<strong>Express.js (Backend Framework)</strong> – A lightweight web application framework for managing server-side operations.</li>\n<li>\n<strong>React.js (Frontend Library)</strong> – A declarative and component-based JavaScript library for building dynamic user interfaces.</li>\n<li>\n<strong>Node.js (Runtime Environment)</strong> – A server-side runtime that enables JavaScript execution outside the browser.</li>\n</ol>\n\n<h3>\n  \n  \n  <strong>Practical Implementation: Social Media Application</strong>\n</h3>\n\n<p>Consider a <strong>social networking platform</strong> analogous to Instagram:</p>\n\n<ul>\n<li>\n<strong>MongoDB</strong> efficiently stores dynamic user-generated content, including posts, likes, and comments, in a non-relational schema.</li>\n<li>\n<strong>Express.js</strong> facilitates API development, enabling data retrieval and interaction between the client and server.</li>\n<li>\n<strong>React.js</strong> provides a highly responsive, component-driven user interface for profile management, real-time notifications, and interactive feeds.</li>\n<li>\n<strong>Node.js</strong> ensures seamless execution of backend operations, including authentication and media uploads.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Use Case Justification</strong>\n</h3>\n\n<p>MERN is particularly advantageous for applications where:</p>\n\n<ul>\n<li>Data is frequently evolving, dynamic, and semi-structured.</li>\n<li>Scalability and flexibility outweigh rigid schema enforcement.</li>\n<li>A unified JavaScript-based development approach is preferred across the stack.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  <strong>PERN Stack: Architectural Overview</strong>\n</h2>\n\n<h3>\n  \n  \n  <strong>Composition</strong>\n</h3>\n\n<p>The PERN stack comprises:</p>\n\n<ol>\n<li>\n<strong>PostgreSQL (Database)</strong> – A powerful SQL-based relational database offering ACID compliance.</li>\n<li>\n<strong>Express.js (Backend Framework)</strong> – Facilitates API and middleware development.</li>\n<li>\n<strong>React.js (Frontend Library)</strong> – Ensures modular and interactive UI design.</li>\n<li>\n<strong>Node.js (Runtime Environment)</strong> – Supports asynchronous execution of backend operations.</li>\n</ol>\n\n<h3>\n  \n  \n  <strong>Practical Implementation: E-Commerce Platform</strong>\n</h3>\n\n<p>A <strong>digital marketplace</strong> akin to Amazon can effectively leverage the PERN stack:</p>\n\n<ul>\n<li>\n<strong>PostgreSQL</strong> enforces structured data storage, maintaining transactional integrity across product inventories, user accounts, and payment records.</li>\n<li>\n<strong>Express.js</strong> streamlines backend operations, ensuring secure user authentication and checkout procedures.</li>\n<li>\n<strong>React.js</strong> enhances user experience by providing dynamic filtering, personalized recommendations, and an optimized shopping cart.</li>\n<li>\n<strong>Node.js</strong> underpins asynchronous operations, facilitating real-time data synchronization.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Use Case Justification</strong>\n</h3>\n\n<p>PERN is ideal for scenarios where:</p>\n\n<ul>\n<li>\n<strong>Data consistency and relational integrity</strong> are paramount.</li>\n<li>\n<strong>Complex SQL queries</strong> are necessary for analytics and reporting.</li>\n<li>\n<strong>Transactional reliability</strong> (e.g., financial applications, e-commerce) is a fundamental requirement.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  <strong>Comparative Analysis: MERN vs. PERN</strong>\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>MERN Stack</th>\n<th>PERN Stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Database Type</strong></td>\n<td>NoSQL (MongoDB)</td>\n<td>SQL (PostgreSQL)</td>\n</tr>\n<tr>\n<td><strong>Data Structure</strong></td>\n<td>Flexible, schema-less</td>\n<td>Relational, structured</td>\n</tr>\n<tr>\n<td><strong>Ideal For</strong></td>\n<td>Social media, real-time apps, content platforms</td>\n<td>E-commerce, finance, inventory systems</td>\n</tr>\n<tr>\n<td><strong>Scalability</strong></td>\n<td>Optimized for horizontal scaling</td>\n<td>Efficient for structured data growth</td>\n</tr>\n<tr>\n<td><strong>Data Integrity</strong></td>\n<td>Less strict, suitable for semi-structured data</td>\n<td>ACID-compliant, ensures transactional consistency</td>\n</tr>\n<tr>\n<td><strong>Query Efficiency</strong></td>\n<td>Simplified, JSON-based</td>\n<td>Supports complex SQL queries</td>\n</tr>\n<tr>\n<td><strong>Learning Curve</strong></td>\n<td>Easier for JavaScript developers</td>\n<td>Requires SQL proficiency</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  <strong>Strategic Considerations: Which Stack to Choose?</strong>\n</h2>\n\n<h3>\n  \n  \n  <strong>MERN Stack Preference</strong>\n</h3>\n\n<ul>\n<li>Recommended for applications requiring high scalability, such as content-driven platforms and real-time data synchronization.</li>\n<li>Ideal for developers seeking a seamless JavaScript environment across frontend and backend.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>PERN Stack Preference</strong>\n</h3>\n\n<ul>\n<li>Optimal for applications necessitating structured data relationships and transactional integrity.</li>\n<li>Preferred for domains involving regulatory compliance, such as financial technology and enterprise resource planning (ERP) systems.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  <strong>Conclusion</strong>\n</h2>\n\n<p>The selection between MERN and PERN is contingent on the specific functional and technical requirements of a given project. While MERN offers unparalleled flexibility and rapid development cycles, PERN ensures robust data integrity and advanced query capabilities. Understanding the nuances of each stack enables developers to make informed architectural decisions aligned with their project’s objectives.</p>\n\n<p>Which stack aligns best with your development needs? Share your insights in the comments below!</p>"
    },
    {
      "title": "Move from DDD Laravel make command to Codestarter (fase 2)",
      "link": "https://dev.to/xwero/move-from-ddd-laravel-make-command-to-codestarter-fase-2-281k",
      "published": "Sat, 08 Mar 2025 09:15:36 +0000",
      "author": "david duymelinck",
      "tags": [
        "php",
        "symfony"
      ],
      "text": "## What happened before\n\nI got the idea to create make commands for a more versatile directory structure. The idea was based on the different DDD file structures.\n\nIn my previous post I tried to find a way to deal with variable file structures to create a file.\n\nThe day after the post I realised the path I was walking leads me to a framework agnostic package. \n\n## Starting Codestarter\n\nIn this second fase I concentrated on code editor like experience in the command line.\n\nBut first I had to move from artisan to Symfony console. Artisan is build on top of console so it is not that big of a step.\n\nBecause I want people to use it with multiple frameworks I create a codestarter file in the bin directory.\n\n```\nif (!is_dir(dirname(__DIR__).'/vendor')) {\n throw new LogicException('Dependencies are missing. Try running \"composer install\".');\n}\n\nrequire dirname(__DIR__).'/vendor/autoload.php';\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Xwero\\Codestarter\\Console\\ClassGenerator;\nuse Xwero\\Codestarter\\Console\\CodeStarter;\n\n$application = new Application('codestarter', '0.1.0');\n$command = new CodeStarter(new Filesystem());\n\n$application->add($command);\n\n$application->add(new ClassGenerator(new Filesystem()));\n\n$application->setDefaultCommand($command->getName());\n$application->run();\n```\n\nBecause I know the main command will be quite some code, I made the decision to start it in a separate class. \n\nI also added the Symfony filesystem package to the project. That makes it easier to do directory and file manipulations.\n\n## How to gather file content\n\nLooking at artisan and the Symfony maker bundle, I saw two different ways to build content. \n\nArtisan works with stub files which are text files with a Twig syntax for the variables.\n\nAnd the maker bundle works with php templates. \n\nI choose for the php templates because I wanted more context in the template file. While I'm not a fan of adding context to templates for a website, here it makes sense for easier extensibility of the command.\n\n```\n// templates/type.php\n<?= \"<?php\\n\" ?>\n\nnamespace <?= $content->namespace; ?>;\n\n<?= $content->getImports() ?>\n\n<?= $content->getTypeDefinition() ?>\n <?= \"\\n\".$content->getMethods().\"\\n\\n\" ?>\n}\n```\n\nThe next step is to add content to the templates.\n\nA DTO like object is a natural fit.\n\n```\nclass Content\n{\n public function __construct(\n public string $namespace = '',\n public array $imports = [],\n public Type $type = Type::Content,\n public array $typePrefixes = [],\n public string $typeName = '',\n public array $typeExtends = [],\n public array $typeImplements = [],\n public array $methods = [],\n public string $content = '',\n )\n {}\n\n public static function getFileContents(string $path, Content|Method $content): string\n {\n if (is_file($path)) {\n ob_start();\n include $path;\n return ob_get_clean();\n }\n return '';\n }\n\n public function getImports(): string\n {\n $useLines = '';\n\n if(count($this->imports) > 0) {\n foreach($this->imports as $import) {\n $useLines .= 'use '.$import.\";\\n\";\n }\n }\n\n return $useLines;\n }\n public function getTypeDefinition(): string\n {\n $definition = '';\n\n if(count($this->typePrefixes) > 0) {\n $definition .= join(' ', $this->typePrefixes);\n }\n\n $definition .= ' '.$this->getType().' '.$this->typeName;\n\n if(count($this->typeExtends) > 0) {\n $definition .= ' extends '.join(', ', $this->typeExtends);\n }\n\n if(count($this->typeImplements) > 0) {\n $definition .= ' implements '.join(', ', $this->typeImplements);\n }\n\n $definition .= \"\\n{\";\n\n return $definition;\n }\n\n public function getMethods(): string\n {\n $methods = '';\n\n if(count($this->methods) > 0) {\n foreach($this->methods as $method) {\n $methods .= self::getFileContents(TypeTemplate::Method->value, $method);\n }\n }\n\n return $methods;\n }\n\n private function getType() : string\n {\n return match($this->type) {\n Type::Content => '',\n Type::Object => 'class',\n Type::Enum => 'enum',\n Type::Interface => 'interface',\n Type::Trait => 'trait',\n };\n }\n}\n```\n\nI provided all the properties with default values, because it is my intention that de command also can create Blade, Twig, and other files.\n\nThe `getFileContents` method was a blast from the past for me. It has been ages I needed to get a file with php content.\n\nI love the simplicity of it. The file is included and it knows the `content` variable. \n\nThe `getMethods` method shows that I created a `Method` DTO because a method is a bit too much to use without a template or a DTO.\n\n```\nclass Method\n{\n public function __construct(\n public string $name,\n public array $prefixes = [],\n public array $arguments = [],\n public string $outputType = '',\n public string $content = '',\n )\n {}\n\n public function getDefinition(): string\n {\n $definition = '';\n\n if(count($this->prefixes) > 0) {\n $definition .= join(' ', $this->prefixes);\n }\n\n $definition .= ' function '.$this->name.'('.$this->getArguments().\")\";\n\n if(strlen($this->outputType) > 0) {\n $definition .= ' : '.$this->outputType;\n }\n\n return $definition.\"\\n\";\n }\n\n public function getContent(): string\n {\n $content = '';\n $indent = ' ';\n\n if(strlen($this->content) > 0) {\n $lines = explode(PHP_EOL, $this->content);\n $indentedLines = array_map(function($line) use ($indent) {\n return $indent.$indent.$line; \n }, $lines);\n $content = \"\\n\".implode(PHP_EOL, $indentedLines).\"\\n\".$indent;\n }\n\n return $content;\n }\n\n private function getArguments()\n {\n return join(', ', $this->arguments);\n }\n}\n```\n\nI struggled a bit with the method body indentation, because I wanted to let developers add it using multi-line input. So in the `getContent` method you see I added spaces to each line.\n\nFor the arguments It will be possible to add visibility and a type. But I decided not to work it out, that is for the next fase.\n\n## The Codestarter command\n\nNow that I have my base to add content to files, I can focus on getting the content from the command line input.\n\nThe first big task I had to tackle was to find a way to add the known classes of the project in the most convenient way possible.\n\nSymfony console provides autocomplete as the part of the question helper.\n\nI discovered that the get_declared_classes PHP function and the composer class map don't contain all the classes from the vendor directory and the source directory.\n\nBecause I didn't want to spend too much time I looked for a package that could could get classes from one or more base directories. And I found wyrihaximus/list-classes-in-directory. \n\nIt is fast because it uses a generator, but for the autocomplete I need an array. And because of the many classes in the vendor directory this took too long.\n\nMy solution was to create a new command that caches the classes in a text file.\n\n```\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse WyriHaximus\\Lister;\n\n#[AsCommand(name: \"generate-classes\")]\nclass ClassGenerator extends Command\n{\n public function __construct(private Filesystem $fs)\n {\n parent::__construct();\n }\n protected function execute(InputInterface $input, OutputInterface $output): int\n {\n $classes = Lister::classesInDirectories(\n dirname(__DIR__) . '/../src',\n dirname(__DIR__) . '/../vendor'\n );\n\n $t= '';\n\n foreach ($classes as $class) {\n $t .= $class.\"\\n\";\n }\n\n $this->fs->dumpFile('classes.txt', $t);\n\n return Command::SUCCESS;\n }\n}\n```\n\nAnd that lead to a `getAutoLoadedClassQuestion` method in the Codestarter command, that uses the text file.\n\n```\nprivate function getAutoLoadedClassQuestion(string $question): Question\n {\n $question = new Question($question.\"\\n\");\n\n $content = $this->fs->readFile('classes.txt');\n $classes = explode(\"\\n\", $content);\n\n $question->setAutocompleterValues($classes);\n\n return $question;\n }\n```\n\nThis function is the base for filling the `$typeExtends` and `$typeImplement` properties of the `Content` class.\n\n```\n$helper = $this->getHelper('question');\n\n $question = new ConfirmationQuestion('Do you want to interactively add extended classes ', false);\n\n $extends = [];\n $imports = [];\n if($helper->ask($input, $output, $question)){\n while (true) {\n $answer = $helper->ask($input, $output, $this->getAutoLoadedClassQuestion('Start typing to autocomplete the class'));\n\n if (empty($answer)) {\n break;\n }\n\n $this->addClass($answer, $extends, $imports);\n }\n }\n// later in the command\n$content = new Content();\n$content->typeExtends = $extends;\n$content->imports = $imports;\n```\n\nI wrote an `addClass` method with the method arguments in the back of my mind.\n\n```\nprivate function addClass(string $classpath, array &$classNames, array &$imports) : void\n {\n if(str_contains($classpath, '\\\\')){\n $classNames[] = substr($classpath, strrpos($classpath, '\\\\') + 1);\n $imports[] = $classpath;\n } else {\n $classNames[] = $classpath;\n }\n }\n```\n\n## Next steps\n\nNow I have to combine all the things I learned this week to create a cleaned up version of the code I already have. And create a package.\n\nA future step is to make it possible to add custom questions procedure to the command with a custom DTO and template.\n\nFor the people who wonder how I landed on the Codestarter name. I didn't want to call it make something because the code creation is not that specific in my opinion. The command is meant as a way to create a more functional code file than is possible with an editor. Even editor templates can't add methods. The command is a good start, hence Codestarter.",
      "html": "<h2>\n  \n  \n  What happened before\n</h2>\n\n<p>I got the idea to create make commands for a more versatile directory structure. The idea was based on the different DDD file structures.</p>\n\n<p>In my <a href=\"https://dev.to/xwero/laravel-creating-an-artisan-ddd-make-command-fase-1-2age\">previous post</a> I tried to find a way to deal with variable file structures to create a file.</p>\n\n<p>The day after the post I realised the path I was walking leads me to a framework agnostic package. </p>\n\n<h2>\n  \n  \n  Starting Codestarter\n</h2>\n\n<p>In this second fase I concentrated on code editor like experience in the command line.</p>\n\n<p>But first I had to move from artisan to <a href=\"https://symfony.com/doc/current/components/console\" rel=\"noopener noreferrer\">Symfony console</a>. Artisan is build on top of console so it is not that big of a step.</p>\n\n<p>Because I want people to use it with multiple frameworks I create a codestarter file in the bin directory.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">is_dir</span><span class=\"p\">(</span><span class=\"nb\">dirname</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"p\">)</span><span class=\"mf\">.</span><span class=\"s1\">'/vendor'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">LogicException</span><span class=\"p\">(</span><span class=\"s1\">'Dependencies are missing. Try running \"composer install\".'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">require</span> <span class=\"nb\">dirname</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"p\">)</span><span class=\"mf\">.</span><span class=\"s1\">'/vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Symfony\\Component\\Console\\Application</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Symfony\\Component\\Filesystem\\Filesystem</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Xwero\\Codestarter\\Console\\ClassGenerator</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Xwero\\Codestarter\\Console\\CodeStarter</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$application</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Application</span><span class=\"p\">(</span><span class=\"s1\">'codestarter'</span><span class=\"p\">,</span> <span class=\"s1\">'0.1.0'</span><span class=\"p\">);</span>\n<span class=\"nv\">$command</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CodeStarter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nc\">Filesystem</span><span class=\"p\">());</span>\n\n<span class=\"nv\">$application</span><span class=\"o\">-&gt;</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nv\">$command</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$application</span><span class=\"o\">-&gt;</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nc\">ClassGenerator</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nc\">Filesystem</span><span class=\"p\">()));</span>\n\n<span class=\"nv\">$application</span><span class=\"o\">-&gt;</span><span class=\"nf\">setDefaultCommand</span><span class=\"p\">(</span><span class=\"nv\">$command</span><span class=\"o\">-&gt;</span><span class=\"nf\">getName</span><span class=\"p\">());</span>\n<span class=\"nv\">$application</span><span class=\"o\">-&gt;</span><span class=\"nf\">run</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Because I know the main command will be quite some code, I made the decision to start it in a separate class. </p>\n\n<p>I also added the <a href=\"https://symfony.com/doc/current/components/filesystem.html\" rel=\"noopener noreferrer\">Symfony filesystem</a> package to the project. That makes it easier to do directory and file manipulations.</p>\n\n<h2>\n  \n  \n  How to gather file content\n</h2>\n\n<p>Looking at artisan and the <a href=\"https://symfony.com/bundles/SymfonyMakerBundle/current/index.html\" rel=\"noopener noreferrer\">Symfony maker bundle</a>, I saw two different ways to build content. <br />\nArtisan works with <a href=\"https://github.com/laravel/framework/blob/12.x/src/Illuminate/Foundation/Console/stubs/class.stub\" rel=\"noopener noreferrer\">stub files</a> which are text files with a Twig syntax for the variables.<br />\nAnd the maker bundle works with <a href=\"https://github.com/symfony/maker-bundle/blob/main/templates/controller/Controller.tpl.php\" rel=\"noopener noreferrer\">php templates</a>. </p>\n\n<p>I choose for the php templates because I wanted more context in the template file. While I'm not a fan of adding context to templates for a website, here it makes sense for easier extensibility of the command.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code>// templates/type.php\n<span class=\"cp\">&lt;?= \"&lt;?php\\n\" ?&gt;</span>\n\nnamespace <span class=\"cp\">&lt;?=</span> <span class=\"nv\">$content</span><span class=\"o\">-&gt;</span><span class=\"n\">namespace</span><span class=\"p\">;</span> <span class=\"cp\">?&gt;</span>;\n\n<span class=\"cp\">&lt;?=</span> <span class=\"nv\">$content</span><span class=\"o\">-&gt;</span><span class=\"nf\">getImports</span><span class=\"p\">()</span> <span class=\"cp\">?&gt;</span>\n\n<span class=\"cp\">&lt;?=</span> <span class=\"nv\">$content</span><span class=\"o\">-&gt;</span><span class=\"nf\">getTypeDefinition</span><span class=\"p\">()</span> <span class=\"cp\">?&gt;</span>\n    <span class=\"cp\">&lt;?=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"mf\">.</span><span class=\"nv\">$content</span><span class=\"o\">-&gt;</span><span class=\"nf\">getMethods</span><span class=\"p\">()</span><span class=\"mf\">.</span><span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span> <span class=\"cp\">?&gt;</span>\n}\n</code></pre>\n\n</div>\n\n\n\n<p>The next step is to add content to the templates.<br />\nA DTO like object is a natural fit.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code><span class=\"kd\">class</span> <span class=\"nc\">Content</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span>       <span class=\"nv\">$namespace</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"k\">public</span> <span class=\"kt\">array</span>        <span class=\"nv\">$imports</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"k\">public</span> <span class=\"kt\">Type</span>         <span class=\"nv\">$type</span> <span class=\"o\">=</span> <span class=\"nc\">Type</span><span class=\"o\">::</span><span class=\"nc\">Content</span><span class=\"p\">,</span>\n        <span class=\"k\">public</span> <span class=\"kt\">array</span>        <span class=\"nv\">$typePrefixes</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span>       <span class=\"nv\">$typeName</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"k\">public</span> <span class=\"kt\">array</span>        <span class=\"nv\">$typeExtends</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"k\">public</span> <span class=\"kt\">array</span>        <span class=\"nv\">$typeImplements</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"k\">public</span> <span class=\"kt\">array</span>        <span class=\"nv\">$methods</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span>       <span class=\"nv\">$content</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"p\">{}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">function</span> <span class=\"n\">getFileContents</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$path</span><span class=\"p\">,</span> <span class=\"kt\">Content</span><span class=\"o\">|</span><span class=\"nc\">Method</span> <span class=\"nv\">$content</span><span class=\"p\">):</span> <span class=\"kt\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">is_file</span><span class=\"p\">(</span><span class=\"nv\">$path</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nb\">ob_start</span><span class=\"p\">();</span>\n            <span class=\"k\">include</span> <span class=\"nv\">$path</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"nb\">ob_get_clean</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">getImports</span><span class=\"p\">():</span> <span class=\"kt\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$useLines</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">count</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">imports</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">imports</span> <span class=\"k\">as</span> <span class=\"nv\">$import</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nv\">$useLines</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"s1\">'use '</span><span class=\"mf\">.</span><span class=\"nv\">$import</span><span class=\"mf\">.</span><span class=\"s2\">\";</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nv\">$useLines</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">getTypeDefinition</span><span class=\"p\">():</span> <span class=\"kt\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$definition</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">count</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">typePrefixes</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"nb\">join</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">typePrefixes</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"s1\">' '</span><span class=\"mf\">.</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nb\">getType</span><span class=\"p\">()</span><span class=\"mf\">.</span><span class=\"s1\">' '</span><span class=\"mf\">.</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">typeName</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">count</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">typeExtends</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"s1\">' extends '</span><span class=\"mf\">.</span><span class=\"nb\">join</span><span class=\"p\">(</span><span class=\"s1\">', '</span><span class=\"p\">,</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">typeExtends</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">count</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">typeImplements</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"s1\">' implements '</span><span class=\"mf\">.</span><span class=\"nb\">join</span><span class=\"p\">(</span><span class=\"s1\">', '</span><span class=\"p\">,</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">typeImplements</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">{\"</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"nv\">$definition</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">getMethods</span><span class=\"p\">():</span> <span class=\"kt\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$methods</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">count</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">methods</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">methods</span> <span class=\"k\">as</span> <span class=\"nv\">$method</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nv\">$methods</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"nf\">getFileContents</span><span class=\"p\">(</span><span class=\"nc\">TypeTemplate</span><span class=\"o\">::</span><span class=\"nc\">Method</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nv\">$method</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nv\">$methods</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">getType</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"kt\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">match</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nc\">Type</span><span class=\"o\">::</span><span class=\"nc\">Content</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n            <span class=\"nc\">Type</span><span class=\"o\">::</span><span class=\"nc\">Object</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'class'</span><span class=\"p\">,</span>\n            <span class=\"nc\">Type</span><span class=\"o\">::</span><span class=\"nc\">Enum</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'enum'</span><span class=\"p\">,</span>\n            <span class=\"nc\">Type</span><span class=\"o\">::</span><span class=\"nc\">Interface</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'interface'</span><span class=\"p\">,</span>\n            <span class=\"nc\">Type</span><span class=\"o\">::</span><span class=\"nc\">Trait</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'trait'</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I provided all the properties with default values, because it is my intention that de command also can create Blade, Twig, and other files.</p>\n\n<p>The <code>getFileContents</code> method was a blast from the past for me. It has been ages I needed to get a file with php content.<br />\nI love the simplicity of it. The file is included and it knows the <code>content</code> variable. <br />\nThe <code>getMethods</code> method shows that I created a <code>Method</code> DTO because a method is a bit too much to use without a template or a DTO.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code><span class=\"kd\">class</span> <span class=\"nc\">Method</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"nv\">$name</span><span class=\"p\">,</span>\n        <span class=\"k\">public</span> <span class=\"kt\">array</span> <span class=\"nv\">$prefixes</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"k\">public</span> <span class=\"kt\">array</span> <span class=\"nv\">$arguments</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"nv\">$outputType</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"nv\">$content</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"p\">{}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">getDefinition</span><span class=\"p\">():</span> <span class=\"kt\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$definition</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">count</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">prefixes</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"nb\">join</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">prefixes</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"s1\">' function '</span><span class=\"mf\">.</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"mf\">.</span><span class=\"s1\">'('</span><span class=\"mf\">.</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">getArguments</span><span class=\"p\">()</span><span class=\"mf\">.</span><span class=\"s2\">\")\"</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">strlen</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">outputType</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$definition</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"s1\">' : '</span><span class=\"mf\">.</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">outputType</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nv\">$definition</span><span class=\"mf\">.</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">getContent</span><span class=\"p\">():</span> <span class=\"kt\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$content</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"nv\">$indent</span> <span class=\"o\">=</span> <span class=\"s1\">'    '</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">strlen</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">content</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$lines</span> <span class=\"o\">=</span> <span class=\"nb\">explode</span><span class=\"p\">(</span><span class=\"kc\">PHP_EOL</span><span class=\"p\">,</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">content</span><span class=\"p\">);</span>\n            <span class=\"nv\">$indentedLines</span> <span class=\"o\">=</span> <span class=\"nb\">array_map</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"nv\">$line</span><span class=\"p\">)</span> <span class=\"k\">use</span> <span class=\"p\">(</span><span class=\"nv\">$indent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nv\">$indent</span><span class=\"mf\">.</span><span class=\"nv\">$indent</span><span class=\"mf\">.</span><span class=\"nv\">$line</span><span class=\"p\">;</span> \n            <span class=\"p\">},</span> <span class=\"nv\">$lines</span><span class=\"p\">);</span>\n            <span class=\"nv\">$content</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"mf\">.</span><span class=\"nb\">implode</span><span class=\"p\">(</span><span class=\"kc\">PHP_EOL</span><span class=\"p\">,</span> <span class=\"nv\">$indentedLines</span><span class=\"p\">)</span><span class=\"mf\">.</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"mf\">.</span><span class=\"nv\">$indent</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nv\">$content</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">getArguments</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">join</span><span class=\"p\">(</span><span class=\"s1\">', '</span><span class=\"p\">,</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">arguments</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I struggled a bit with the method body indentation, because I wanted to let developers add it using multi-line input. So in the <code>getContent</code> method you see I added spaces to each line.</p>\n\n<p>For the arguments It will be possible to add visibility and a type. But I decided not to work it out, that is for the next fase.</p>\n\n<h2>\n  \n  \n  The Codestarter command\n</h2>\n\n<p>Now that I have my base to add content to files, I can focus on getting the content from the command line input.</p>\n\n<p>The first big task I had to tackle was to find a way to add the known classes of the project in the most convenient way possible.<br />\nSymfony console provides <a href=\"https://symfony.com/doc/current/components/console/helpers/questionhelper.html#autocompletion\" rel=\"noopener noreferrer\">autocomplete</a> as the part of the question helper.</p>\n\n<p>I discovered that the <a href=\"https://www.php.net/manual/en/function.get-declared-classes.php\" rel=\"noopener noreferrer\">get_declared_classes</a> PHP function and the composer class map don't contain all the classes from the vendor directory and the source directory.<br />\nBecause I didn't want to spend too much time I looked for a package that could could get classes from one or more base directories. And I found <a href=\"https://github.com/WyriHaximus/php-list-classes-in-directory\" rel=\"noopener noreferrer\">wyrihaximus/list-classes-in-directory</a>. <br />\nIt is fast because it uses a <a href=\"https://www.php.net/manual/en/language.generators.overview.php\" rel=\"noopener noreferrer\">generator</a>, but for the autocomplete I need an array. And because of the many classes in the vendor directory this took too long.<br />\nMy solution was to create a new command that caches the classes in a text file.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code><span class=\"kn\">use</span> <span class=\"nc\">Symfony\\Component\\Console\\Attribute\\AsCommand</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Symfony\\Component\\Console\\Command\\Command</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Symfony\\Component\\Console\\Input\\InputInterface</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Symfony\\Component\\Console\\Output\\OutputInterface</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Symfony\\Component\\Filesystem\\Filesystem</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">WyriHaximus\\Lister</span><span class=\"p\">;</span>\n\n<span class=\"na\">#[AsCommand(name: \"generate-classes\")]</span>\n<span class=\"kd\">class</span> <span class=\"nc\">ClassGenerator</span> <span class=\"kd\">extends</span> <span class=\"nc\">Command</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span><span class=\"k\">private</span> <span class=\"kt\">Filesystem</span> <span class=\"nv\">$fs</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">parent</span><span class=\"o\">::</span><span class=\"nf\">__construct</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">protected</span> <span class=\"k\">function</span> <span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"kt\">InputInterface</span> <span class=\"nv\">$input</span><span class=\"p\">,</span> <span class=\"kt\">OutputInterface</span> <span class=\"nv\">$output</span><span class=\"p\">):</span> <span class=\"kt\">int</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$classes</span> <span class=\"o\">=</span> <span class=\"nc\">Lister</span><span class=\"o\">::</span><span class=\"nf\">classesInDirectories</span><span class=\"p\">(</span>\n            <span class=\"nb\">dirname</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"p\">)</span> <span class=\"mf\">.</span> <span class=\"s1\">'/../src'</span><span class=\"p\">,</span>\n            <span class=\"nb\">dirname</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"p\">)</span> <span class=\"mf\">.</span> <span class=\"s1\">'/../vendor'</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nv\">$t</span><span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n\n        <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"nv\">$classes</span> <span class=\"k\">as</span> <span class=\"nv\">$class</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$t</span> <span class=\"mf\">.</span><span class=\"o\">=</span> <span class=\"nv\">$class</span><span class=\"mf\">.</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">fs</span><span class=\"o\">-&gt;</span><span class=\"nf\">dumpFile</span><span class=\"p\">(</span><span class=\"s1\">'classes.txt'</span><span class=\"p\">,</span> <span class=\"nv\">$t</span><span class=\"p\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"nc\">Command</span><span class=\"o\">::</span><span class=\"no\">SUCCESS</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>And that lead to a <code>getAutoLoadedClassQuestion</code> method in the Codestarter command, that uses the text file.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code><span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">getAutoLoadedClassQuestion</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$question</span><span class=\"p\">):</span> <span class=\"kt\">Question</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$question</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Question</span><span class=\"p\">(</span><span class=\"nv\">$question</span><span class=\"mf\">.</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">);</span>\n\n        <span class=\"nv\">$content</span> <span class=\"o\">=</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">fs</span><span class=\"o\">-&gt;</span><span class=\"nb\">readFile</span><span class=\"p\">(</span><span class=\"s1\">'classes.txt'</span><span class=\"p\">);</span>\n        <span class=\"nv\">$classes</span> <span class=\"o\">=</span> <span class=\"nb\">explode</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"nv\">$content</span><span class=\"p\">);</span>\n\n        <span class=\"nv\">$question</span><span class=\"o\">-&gt;</span><span class=\"nf\">setAutocompleterValues</span><span class=\"p\">(</span><span class=\"nv\">$classes</span><span class=\"p\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"nv\">$question</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This function is the base for filling the <code>$typeExtends</code> and <code>$typeImplement</code> properties of the <code>Content</code> class.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code><span class=\"nv\">$helper</span> <span class=\"o\">=</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">getHelper</span><span class=\"p\">(</span><span class=\"s1\">'question'</span><span class=\"p\">);</span>\n\n        <span class=\"nv\">$question</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ConfirmationQuestion</span><span class=\"p\">(</span><span class=\"s1\">'Do you want to interactively add extended classes '</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n\n        <span class=\"nv\">$extends</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"nv\">$imports</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nv\">$helper</span><span class=\"o\">-&gt;</span><span class=\"nf\">ask</span><span class=\"p\">(</span><span class=\"nv\">$input</span><span class=\"p\">,</span> <span class=\"nv\">$output</span><span class=\"p\">,</span> <span class=\"nv\">$question</span><span class=\"p\">)){</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nv\">$answer</span> <span class=\"o\">=</span> <span class=\"nv\">$helper</span><span class=\"o\">-&gt;</span><span class=\"nf\">ask</span><span class=\"p\">(</span><span class=\"nv\">$input</span><span class=\"p\">,</span> <span class=\"nv\">$output</span><span class=\"p\">,</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">getAutoLoadedClassQuestion</span><span class=\"p\">(</span><span class=\"s1\">'Start typing to autocomplete the class'</span><span class=\"p\">));</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">empty</span><span class=\"p\">(</span><span class=\"nv\">$answer</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">addClass</span><span class=\"p\">(</span><span class=\"nv\">$answer</span><span class=\"p\">,</span> <span class=\"nv\">$extends</span><span class=\"p\">,</span> <span class=\"nv\">$imports</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n<span class=\"c1\">// later in the command</span>\n<span class=\"nv\">$content</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Content</span><span class=\"p\">();</span>\n<span class=\"nv\">$content</span><span class=\"o\">-&gt;</span><span class=\"n\">typeExtends</span> <span class=\"o\">=</span> <span class=\"nv\">$extends</span><span class=\"p\">;</span>\n<span class=\"nv\">$content</span><span class=\"o\">-&gt;</span><span class=\"n\">imports</span> <span class=\"o\">=</span> <span class=\"nv\">$imports</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I wrote an <code>addClass</code> method with the method arguments in the back of my mind.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight php\"><code><span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">addClass</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$classpath</span><span class=\"p\">,</span> <span class=\"kt\">array</span> <span class=\"o\">&amp;</span><span class=\"nv\">$classNames</span><span class=\"p\">,</span> <span class=\"kt\">array</span> <span class=\"o\">&amp;</span><span class=\"nv\">$imports</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"kt\">void</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nf\">str_contains</span><span class=\"p\">(</span><span class=\"nv\">$classpath</span><span class=\"p\">,</span> <span class=\"s1\">'\\\\'</span><span class=\"p\">)){</span>\n            <span class=\"nv\">$classNames</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nv\">$classpath</span><span class=\"p\">,</span>  <span class=\"nb\">strrpos</span><span class=\"p\">(</span><span class=\"nv\">$classpath</span><span class=\"p\">,</span> <span class=\"s1\">'\\\\'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"nv\">$imports</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"nv\">$classpath</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$classNames</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"nv\">$classpath</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Next steps\n</h2>\n\n<p>Now I have to combine all the things I learned this week to create a cleaned up version of the code I already have. And create a package.</p>\n\n<p>A future step is to make it possible to add custom questions procedure to the command with a custom DTO and template.</p>\n\n<p>For the people who wonder how I landed on the Codestarter name. I didn't want to call it make something because the code creation is not that specific in my opinion. The command is meant as a way to create a more functional code file than is possible with an editor. Even editor templates can't add methods. The command is a good start, hence Codestarter.</p>"
    },
    {
      "title": "How PemPem is harnessing the power of federation with a customized approach to accelerate product development at scale",
      "link": "https://dev.to/slickstef11/how-pempem-is-harnessing-the-power-of-federation-with-a-customized-approach-to-accelerate-product-1031",
      "published": "Sat, 08 Mar 2025 09:14:10 +0000",
      "author": "Stefan  🚀",
      "tags": [],
      "text": "We're hiring!\n\nWe're looking for Golang (Go) Developers, DevOps Engineers and Solution Architects who want to help us shape the future of Microservices, distributed systems, and APIs.\n\nBy working at WunderGraph, you'll have the opportunity to build the next generation of API and Microservices infrastructure. Our customer base ranges from small startups to well-known enterprises, allowing you to not just have an impact at scale, but also to build a network of industry professionals.\n\nSee Open Positions\n\nBelieve it or not, but ~60% of the global food calories are produced by ~500 million farmers who own plots of land not much bigger than 2 hectares and trade through a dynamic network of non-transparent traders. These farmers are known as smallholder farmers.\n\nThe supply chain from the farm to the factory largely depends on word-of-mouth information, using personal memory or pen & paper as only records. This leads to lost revenues and a lack of traceability, contributing significantly to illegal deforestation.\n\nPemPem has built a mobile-based trading platform with embedded financing for smallholder farmers producing commodities worldwide. Their platform is like a digital exchange, with integrated logistics and financing and 100% traceability from farm to factory.\n\n## The journey to federation begins\n\nOur previous provider had some limitations on customization that we hit early when we started to scale. GraphQL Federation with WunderGraph Cosmo allowed us to serve multiple endpoints without restrictions with a single router. -José Rose, Senior developer at PemPem\n\nLike any startup, you'll know when you hit product market fit. Customers are signing up, usage is skyrocketing, and things around you are breaking. This is precisely what PemPem started to experience earlier this year. Their commodity market trading platform had lifted off!\n\nWhile they started to scale very quickly, they also realized that their old solution and vendor could not scale as soon as they could and needed more customization in various areas. José and his team started looking for a solution that would allow them to scale while keeping costs low and introducing observability across their entire stack.\n\nWith their previous approach, they hit limits quickly on custom visible endpoints for their clients and started looking into GraphQL federation solutions.\n\n### The Transition to GraphQL Federation\n\nWe're relatively new to GraphQL Federation. Still, the transition from our old solution to Cosmo was very smooth, and we like the direction WunderGraph Cosmo is going for federation vs our previous provider.\n\n-José Rose, Senior developer at PemPem\n\nWhile looking for a solution and scaling rapidly, José and his team learned about GraphQL Federation and WunderGraph Cosmo. With the WunderGraph router, they could place it in front of their architecture and serve multiple endpoints through Cosmo's performant router as a single point of truth. This quickly alleviated the concern with their previous provider because they would have had to hack together a custom solution.\n\n### Embracing Federated GraphQL with WunderGraph Cosmo\n\nWhile scaling the usage of their platform, José and his team noticed they were having issues with clients and permission issues across their stack. With multiple client stacks, such as web and mobile applications, they needed a way to observe all of them and improve development time for endpoints.\n\nWith the Cosmo Router, they can now serve multiple clients with a single entry point versus having to stitch together multiple managed services. Scaling with Federation and Cosmo allows José and his team to choose the data they want from various data sources and harness it into a single place of truth.\n\nWith the Cosmo Studio, José and his team can now get end-to-end observability on their client's stacks and increase security permissions for their clients. They can understand who is using what client and if fields need to be included or are used across all their clients. PemPem is a heavy user of DataDog and wanted to have all their analytics in one place. With Cosmo Studio's OTEL Exporter , they were quickly able to sync Cosmo Studio and DataDog.\n\n## Key features highlighted by PemPem\n\n### Maintained Productivity and Expanded Possibilities with Studio:\n\nPemPems's productivity level, achieved through federation, has been successfully maintained with Cosmo's Studio . Additionally, the studio's detailed analytics dashboard and Advanced Request Tracing have allowed PemPem to have observability across their entire platform and quickly identify bottlenecks across clients.\n\n### Migration process\n\nMigrating to WunderGraph Cosmo proved to be a trivial and enjoyable journey for the PemPem team; They were able to set up the router within a day and have moved fully into production in less than 30 days.\n\n### Team support\n\nWunderGraph Support was enjoyable for both parties. With a shared Slack connection and access to our development team, PemPem could ask any questions during their migration and about the latest news in GraphQL Federation. José highlighted the speed at which we could help him with questions and issues.\n\n## Final Thoughts\n\nCosmo's graphql federation solution allowed PemPem to quickly migrate away from their old solution while adding GraphQL Federation to their tech stack. The highlighted benefits included improved performance, enhanced observability, cost savings, and more. To experience WunderGraph Cosmo, sign up for Cosmo's free tier and start building (no credit card needed) \n\nWe learned about WunderGraph Cosmo and deployed it into production in about ten days. I highly recommend WunderGraph Cosmo; they helped us pivot quickly when we needed a solution ASAP! Everything now is working perfectly. -José Rose, Senior developer at PemPem\n\n## Video testimony\n\nIf you prefer watching to reading, you also have the option to view this case study as a video.",
      "html": "<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fjw7r22yeefedlic5uhdh.PNG\"><img alt=\"Image description\" height=\"453\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fjw7r22yeefedlic5uhdh.PNG\" width=\"800\" /></a></p>\n\n<p>We're hiring!</p>\n\n<p>We're looking for Golang (Go) Developers, DevOps Engineers and Solution Architects who want to help us shape the future of Microservices, distributed systems, and APIs.</p>\n\n<p>By working at WunderGraph, you'll have the opportunity to build the next generation of API and Microservices infrastructure. Our customer base ranges from small startups to well-known enterprises, allowing you to not just have an impact at scale, but also to build a network of industry professionals.</p>\n\n<p><a href=\"https://wundergraph.com/jobs#open-positions\" rel=\"noopener noreferrer\">See Open Positions</a></p>\n\n<p>Believe it or not, but ~60% of the global food calories are produced by ~500 million farmers who own plots of land not much bigger than 2 hectares and trade through a dynamic network of non-transparent traders. These farmers are known as smallholder farmers.</p>\n\n<p>The supply chain from the farm to the factory largely depends on word-of-mouth information, using personal memory or pen &amp; paper as only records. This leads to lost revenues and a lack of traceability, contributing significantly to illegal deforestation.</p>\n\n<p><a href=\"https://www.pempem.io/\" rel=\"noopener noreferrer\">PemPem</a> has built a mobile-based trading platform with embedded financing for smallholder farmers producing commodities worldwide. Their platform is like a digital exchange, with integrated logistics and financing and 100% traceability from farm to factory.</p>\n\n<h2>\n  \n  \n  The journey to federation begins\n</h2>\n\n<blockquote>\n<p>Our previous provider had some limitations on customization that we hit early when we started to scale. GraphQL Federation with WunderGraph Cosmo allowed us to serve multiple endpoints without restrictions with a single router. -José Rose, Senior developer at PemPem</p>\n</blockquote>\n\n<p>Like any startup, you'll know when you hit product market fit. Customers are signing up, usage is skyrocketing, and things around you are breaking. This is precisely what PemPem started to experience earlier this year. Their commodity market trading platform had lifted off!</p>\n\n<p>While they started to scale very quickly, they also realized that their old solution and vendor could not scale as soon as they could and needed more customization in various areas. José and his team started looking for a solution that would allow them to scale while keeping costs low and introducing observability across their entire stack.</p>\n\n<p>With their previous approach, they hit limits quickly on custom visible endpoints for their clients and started looking into GraphQL federation solutions.</p>\n\n<h3>\n  \n  \n  The Transition to GraphQL Federation\n</h3>\n\n<blockquote>\n<p>We're relatively new to GraphQL Federation. Still, the transition from our old solution to Cosmo was very smooth, and we like the direction WunderGraph Cosmo is going for federation vs our previous provider.<br />\n-José Rose, Senior developer at PemPem</p>\n</blockquote>\n\n<p>While looking for a solution and scaling rapidly, José and his team learned about GraphQL Federation and WunderGraph Cosmo. With the WunderGraph router, they could place it in front of their architecture and serve multiple endpoints through Cosmo's performant router as a single point of truth. This quickly alleviated the concern with their previous provider because they would have had to hack together a custom solution.</p>\n\n<h3>\n  \n  \n  Embracing Federated GraphQL with WunderGraph Cosmo\n</h3>\n\n<p>While scaling the usage of their platform, José and his team noticed they were having issues with clients and permission issues across their stack. With multiple client stacks, such as web and mobile applications, they needed a way to observe all of them and improve development time for endpoints.</p>\n\n<p>With the Cosmo Router, they can now serve multiple clients with a single entry point versus having to stitch together multiple managed services. Scaling with Federation and Cosmo allows José and his team to choose the data they want from various data sources and harness it into a single place of truth.</p>\n\n<p>With the Cosmo Studio, José and his team can now get end-to-end observability on their client's stacks and increase security permissions for their clients. They can understand who is using what client and if fields need to be included or are used across all their clients. PemPem is a heavy user of DataDog and wanted to have all their analytics in one place. With Cosmo Studio's <a href=\"https://cosmo-docs.wundergraph.com/router/open-telemetry#can-i-export-otel-data-from-my-application\" rel=\"noopener noreferrer\">OTEL Exporter</a> , they were quickly able to sync Cosmo Studio and DataDog.</p>\n\n<h2>\n  \n  \n  Key features highlighted by PemPem\n</h2>\n\n<h3>\n  \n  \n  Maintained Productivity and Expanded Possibilities with Studio:\n</h3>\n\n<p>PemPems's productivity level, achieved through federation, has been successfully maintained with <a href=\"https://wundergraph.com/cosmo/features\" rel=\"noopener noreferrer\">Cosmo's Studio</a> . Additionally, the studio's detailed analytics dashboard and Advanced Request Tracing have allowed PemPem to have observability across their entire platform and quickly identify bottlenecks across clients.</p>\n\n<h3>\n  \n  \n  Migration process\n</h3>\n\n<p><a href=\"https://cosmo-docs.wundergraph.com/studio/migrate-from-apollo\" rel=\"noopener noreferrer\">Migrating to WunderGraph Cosmo</a> proved to be a trivial and enjoyable journey for the PemPem team; They were able to set up the router within a day and have moved fully into production in less than 30 days.</p>\n\n<h3>\n  \n  \n  Team support\n</h3>\n\n<p><a href=\"https://wundergraph.com/services\" rel=\"noopener noreferrer\">WunderGraph Support</a>  was enjoyable for both parties. With a shared Slack connection and access to our development team, PemPem could ask any questions during their migration and about the latest news in GraphQL Federation. José highlighted the speed at which we could help him with questions and issues.</p>\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>Cosmo's graphql federation solution allowed PemPem to quickly migrate away from their old solution while adding GraphQL Federation to their tech stack. The highlighted benefits included improved performance, enhanced observability, cost savings, and more. <a href=\"https://cosmo.wundergraph.com/login\" rel=\"noopener noreferrer\">To experience WunderGraph Cosmo, sign up for Cosmo's free tier and start building (no credit card needed) </a></p>\n\n<blockquote>\n<p>We learned about WunderGraph Cosmo and deployed it into production in about ten days. I highly recommend WunderGraph Cosmo; they helped us pivot quickly when we needed a solution ASAP! Everything now is working perfectly. -José Rose, Senior developer at PemPem</p>\n</blockquote>\n\n<h2>\n  \n  \n  Video testimony\n</h2>\n\n<p>If you prefer watching to reading, you also have the option to view this case study as a video.</p>\n\n<p>\n\n</p>"
    },
    {
      "title": "Creating a Live Location App",
      "link": "https://dev.to/mahmud-r-farhan/creating-a-live-location-app-ef2",
      "published": "Sat, 08 Mar 2025 09:11:50 +0000",
      "author": "Mahmudur Rahman",
      "tags": [
        "socket",
        "location",
        "leafletmap",
        "node"
      ],
      "text": "# Developing a Live Location App\n\nBefore starting, ensure you have the following installed:\n\n**Node.js** and **npm** (Node Package Manager)\n\nBasic knowledge of JavaScript, Express, and EJS.\n\n### Project Structure\n\n```\nlive-location-app/\n│\n├── views/\n│ ├── index.ejs\n│\n├── public/\n│ ├── style.css\n│ ├── main.js\n│ ├── leaflet.css\n│ ├── leaflet.js\n│\n├── server.js\n├── package.json\n```\n\n### 1. Setting Up the Project\n\nCreate a new directory for your project:\n\n```\nmkdir live-location-app\n cd live-location-app\n```\n\nInitialize a new Node.js project:\n\n```\nnpm init -y\n```\n\nInstall the required dependencies:\n\n```\nnpm install express ejs socket.io\n```\n\n### 2. Setting Up the Server\n\nCreate a server.js file and set up the Express server and Socket.IO.\n\n```\nconst express = require('express');\nconst http = require('http');\nconst { Server } = require('socket.io');\nconst path = require('path');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server);\n\n// Set up EJS as the view engine\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\n\n// Serve static files (CSS, JS)\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Render the index page\napp.get('/', (req, res) => {\n res.render('index');\n});\n\n// Socket.IO connection\nio.on('connection', (socket) => {\n console.log('A user connected:', socket.id);\n\n // Listen for location updates from the client\n socket.on('updateLocation', (location) => {\n console.log('Location received:', location);\n\n // Broadcast the location to all connected clients\n io.emit('newLocation', { id: socket.id, location });\n });\n\n // Handle disconnection\n socket.on('disconnect', () => {\n console.log('A user disconnected:', socket.id);\n });\n});\n\n// Start the server\nconst PORT = process.env.PORT || 3333;\nserver.listen(PORT, () => {\n console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n\n### 3. Add Leaflet Files\n\nDownload the Leaflet CSS and JS files from the official website: https://leafletjs.com/.\n\nPlace the `leaflet.css` and `leaflet.js` files in the `public` folder.\n\n### 4. `views/index.ejs`\n\nAdd Leaflet's CSS and JS files to the EJS template.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Live Location Sharing</title>\n <link rel=\"stylesheet\" href=\"/leaflet.css\">\n <link rel=\"stylesheet\" href=\"/style.css\">\n</head>\n<body>\n <h1>Live Location Sharing</h1>\n <div id=\"map\"></div>\n <script src=\"/leaflet.js\"></script>\n <script src=\"/socket.io/socket.io.js\"></script>\n <script src=\"/main.js\"></script>\n</body>\n</html>\n```\n\n### 5. `style.css`\n\nAdd some basic styling for the map.\n\n```\nbody {\n font-family: Arial, sans-serif;\n text-align: center;\n margin: 0;\n padding: 0;\n}\n\nh1 {\n margin: 20px 0;\n}\n\n#map {\n height: 500px;\n width: 90%;\n margin: 0 auto;\n border: 2px solid #ccc;\n border-radius: 10px;\n}\n```\n\n### 6.`main.js`\n\nIntegrate Leaflet to display the user's live and other users' locations.\n\n```\nconst socket = io();\n\n// Initialize the map\nconst map = L.map('map').setView([0, 0], 13); // Default center and zoom level\n\n// Add a tile layer (you can use OpenStreetMap or other providers)\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n attribution: '&copy; <a href=\"https://gravatar.com/floawd\">developer</a>'\n }).addTo(map);\n\n// Marker for the current user\nlet userMarker = null;\n\n// Check if Geolocation is supported\nif ('geolocation' in navigator) {\n navigator.geolocation.watchPosition(\n (position) => {\n const { latitude, longitude } = position.coords;\n\n // Send the location to the server\n socket.emit('updateLocation', { latitude, longitude });\n\n // Update the map with the user's location\n if (!userMarker) {\n userMarker = L.marker([latitude, longitude]).addTo(map)\n .bindPopup('My Location')\n .openPopup();\n } else {\n userMarker.setLatLng([latitude, longitude]);\n }\n\n // Center the map on the user's location\n map.setView([latitude, longitude], 13);\n },\n (error) => {\n console.error('Error getting location:', error);\n },\n { enableHighAccuracy: true }\n );\n} else {\n alert('Geolocation is not supported by your browser.');\n}\n\n// Listen for new locations from other users\nsocket.on('newLocation', (data) => {\n console.log('New location received:', data);\n\n // Add or update a marker for the other user\n if (!window.otherMarkers) {\n window.otherMarkers = {};\n }\n\n const { id, location } = data;\n if (!window.otherMarkers[id]) {\n window.otherMarkers[id] = L.marker([location.latitude, location.longitude])\n .bindPopup(`User ${id}`)\n .addTo(map);\n } else {\n window.otherMarkers[id].setLatLng([location.latitude, location.longitude]);\n }\n});\n```\n\n### 7. Explanation of the Code\n\n**Leaflet Map Initialization**:\n\nThe map is initialized with a default center (`[0, 0]`) and zoom level (`13`).\n\nA tile layer (OpenStreetMap) is added to the map.\n\n**User Location**:\n\nThe `geolocation.watchPosition` API continuously tracks the user's location.\n\nA marker is created for the user and updated as their location changes.\n\n**Other Users' Locations**:\n\nWhen the server broadcasts a new location (`newLocation`), a marker is created or updated for that user.\n\n**Socket.IO**:\n\nThe client sends the user's location to the server using `updateLocation`.\n\nThe server broadcasts the location to all clients using `newLocation`.\n\n### 8. Running the App\n\nStart the server:\n\n```\nnode server.js\n```\n\nOpen your browser and navigate to `http://localhost:3333`.\n\nAllow the browser to access your location. You should see your live location on the map.\n\nOpen the app in another browser or device. You'll see both users' locations on the map in real-time.\n\n### 9. Example Output\n\nThe map will display your location with a \"My Location\" marker.\n\nOther users' locations will appear as markers labeled \"User [ID]\".\n\nThe map will automatically center on your location.\n\n### 10. Understanding Socket.IO Events\n\n Connection Event\n\nEvery new user triggers the `connection` event.\n\n```\nio.on('connection', (socket) => {\n console.log('A user connected');\n});\n```\n\nEmitting Events\n\nYou can send data between the client and server using `socket.emit()`.\n\n```\nsocket.emit('customEvent', { message: 'Hello, client!' });\n```\n\nListening for Events\n\nThe client can listen for events from the server using `socket.on()`.\n\n```\nsocket.on('customEvent', (data) => {\n console.log(data.message);\n});\n```\n\nBroadcasting Messages\n\nTo send a message to all connected clients except the sender:\n\n```\nsocket.broadcast.emit('updateLocation', data);\n```\n\nHandling Disconnections\n\nWhen a user leaves, handle the `disconnect` event:\n\n```\nsocket.on('disconnect', () => {\n console.log('User disconnected');\n});\n```\n\n### 11. Scaling Socket.IO Applications\n\nFor larger applications, consider:\n\nUsing Redis for scaling WebSocket connections\n\nImplementing authentication for secure communication\n\nHandling rooms for group-based communication\n\nDeploying with Nginx for WebSocket support\n\n## Realtime Location Tracker & Communications\n\n### Mahmudur Rahman ・ Dec 20 '24\n\n#socket\n#javascript\n#github\n#location\n\nFollow for more!",
      "html": "<h1>\n  \n  \n  Developing a Live Location App\n</h1>\n\n<p>Before starting, ensure you have the following installed:</p>\n\n<ul>\n<li><p><strong>Node.js</strong>  and  <strong>npm</strong>  (Node Package Manager)</p></li>\n<li><p>Basic knowledge of JavaScript, Express, and EJS.</p></li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  Project Structure\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>live-location-app/\n│\n├── views/\n│   ├── index.ejs\n│\n├── public/\n│   ├── style.css\n│   ├── main.js\n│   ├── leaflet.css\n│   ├── leaflet.js\n│\n├── server.js\n├── package.json\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>1. Setting Up the Project</strong>\n</h3>\n\n<ol>\n<li>Create a new directory for your project:\n</li>\n</ol>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   <span class=\"nb\">mkdir </span>live-location-app\n   <span class=\"nb\">cd </span>live-location-app\n</code></pre>\n\n</div>\n\n\n<ol>\n<li>Initialize a new Node.js project:\n</li>\n</ol>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   npm init <span class=\"nt\">-y</span>\n</code></pre>\n\n</div>\n\n\n<ol>\n<li>Install the required dependencies:\n</li>\n</ol>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   npm <span class=\"nb\">install </span>express ejs socket.io\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>2. Setting Up the Server</strong>\n</h3>\n\n<p>Create a server.js file and set up the Express server and Socket.IO.<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">Server</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">socket.io</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">path</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nf\">express</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nf\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">io</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Server</span><span class=\"p\">(</span><span class=\"nx\">server</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Set up EJS as the view engine</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">view engine</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">ejs</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">views</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">views</span><span class=\"dl\">'</span><span class=\"p\">));</span>\n\n<span class=\"c1\">// Serve static files (CSS, JS)</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nf\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">public</span><span class=\"dl\">'</span><span class=\"p\">)));</span>\n\n<span class=\"c1\">// Render the index page</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">index</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// Socket.IO connection</span>\n<span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nf\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">connection</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">socket</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">A user connected:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Listen for location updates from the client</span>\n  <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nf\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">updateLocation</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Location received:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">location</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Broadcast the location to all connected clients</span>\n    <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">newLocation</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">location</span> <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Handle disconnection</span>\n  <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nf\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">disconnect</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">A user disconnected:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// Start the server</span>\n<span class=\"kd\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"mi\">3333</span><span class=\"p\">;</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nx\">PORT</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`Server is running on http://localhost:</span><span class=\"p\">${</span><span class=\"nx\">PORT</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>3. Add Leaflet Files</strong>\n</h3>\n\n<p>Download the Leaflet CSS and JS files from the official website: <a href=\"https://leafletjs.com/\" rel=\"noopener noreferrer\">https://leafletjs.com/</a>.</p>\n\n<p>Place the <code>leaflet.css</code> and <code>leaflet.js</code> files in the <code>public</code> folder.</p>\n\n\n<h3>\n  \n  \n  <strong>4.  <code>views/index.ejs</code></strong>\n</h3>\n\n<p>Add Leaflet's CSS and JS files to the EJS template.<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;head&gt;</span>\n  <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"UTF-8\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1.0\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;title&gt;</span>Live Location Sharing<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"/leaflet.css\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"/style.css\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;h1&gt;</span>Live Location Sharing<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"map\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"/leaflet.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"/socket.io/socket.io.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"/main.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>5. <code>style.css</code></strong>\n</h3>\n\n<p>Add some basic styling for the map.<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">Arial</span><span class=\"p\">,</span> <span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n  <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">20px</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">#map</span> <span class=\"p\">{</span>\n  <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">500px</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">90%</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">2px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>6.<code>main.js</code></strong>\n</h3>\n\n<p>Integrate Leaflet to display the user's live and other users' locations.<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">socket</span> <span class=\"o\">=</span> <span class=\"nf\">io</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Initialize the map</span>\n<span class=\"kd\">const</span> <span class=\"nx\">map</span> <span class=\"o\">=</span> <span class=\"nx\">L</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">map</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nf\">setView</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mi\">13</span><span class=\"p\">);</span> <span class=\"c1\">// Default center and zoom level</span>\n\n<span class=\"c1\">// Add a tile layer (you can use OpenStreetMap or other providers)</span>\n<span class=\"nx\">L</span><span class=\"p\">.</span><span class=\"nf\">tileLayer</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">attribution</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">&amp;copy; &lt;a href=\"https://gravatar.com/floawd\"&gt;developer&lt;/a&gt;</span><span class=\"dl\">'</span>\n    <span class=\"p\">}).</span><span class=\"nf\">addTo</span><span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Marker for the current user</span>\n<span class=\"kd\">let</span> <span class=\"nx\">userMarker</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Check if Geolocation is supported</span>\n<span class=\"k\">if </span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">geolocation</span><span class=\"dl\">'</span> <span class=\"k\">in</span> <span class=\"nb\">navigator</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nb\">navigator</span><span class=\"p\">.</span><span class=\"nx\">geolocation</span><span class=\"p\">.</span><span class=\"nf\">watchPosition</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"nx\">position</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">latitude</span><span class=\"p\">,</span> <span class=\"nx\">longitude</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">position</span><span class=\"p\">.</span><span class=\"nx\">coords</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// Send the location to the server</span>\n      <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">updateLocation</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">latitude</span><span class=\"p\">,</span> <span class=\"nx\">longitude</span> <span class=\"p\">});</span>\n\n      <span class=\"c1\">// Update the map with the user's location</span>\n      <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">userMarker</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">userMarker</span> <span class=\"o\">=</span> <span class=\"nx\">L</span><span class=\"p\">.</span><span class=\"nf\">marker</span><span class=\"p\">([</span><span class=\"nx\">latitude</span><span class=\"p\">,</span> <span class=\"nx\">longitude</span><span class=\"p\">]).</span><span class=\"nf\">addTo</span><span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nf\">bindPopup</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">My Location</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nf\">openPopup</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">userMarker</span><span class=\"p\">.</span><span class=\"nf\">setLatLng</span><span class=\"p\">([</span><span class=\"nx\">latitude</span><span class=\"p\">,</span> <span class=\"nx\">longitude</span><span class=\"p\">]);</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// Center the map on the user's location</span>\n      <span class=\"nx\">map</span><span class=\"p\">.</span><span class=\"nf\">setView</span><span class=\"p\">([</span><span class=\"nx\">latitude</span><span class=\"p\">,</span> <span class=\"nx\">longitude</span><span class=\"p\">],</span> <span class=\"mi\">13</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error getting location:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"na\">enableHighAccuracy</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n  <span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Geolocation is not supported by your browser.</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Listen for new locations from other users</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nf\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">newLocation</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">New location received:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Add or update a marker for the other user</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">otherMarkers</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">otherMarkers</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">location</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">otherMarkers</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">otherMarkers</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">L</span><span class=\"p\">.</span><span class=\"nf\">marker</span><span class=\"p\">([</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">latitude</span><span class=\"p\">,</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">longitude</span><span class=\"p\">])</span>\n      <span class=\"p\">.</span><span class=\"nf\">bindPopup</span><span class=\"p\">(</span><span class=\"s2\">`User </span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nf\">addTo</span><span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">otherMarkers</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">].</span><span class=\"nf\">setLatLng</span><span class=\"p\">([</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">latitude</span><span class=\"p\">,</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">longitude</span><span class=\"p\">]);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>7. Explanation of the Code</strong>\n</h3>\n\n<ol>\n<li>\n<p><strong>Leaflet Map Initialization</strong>:</p>\n\n<ul>\n<li>The map is initialized with a default center (<code>[0, 0]</code>) and zoom level (<code>13</code>).</li>\n<li>A tile layer (OpenStreetMap) is added to the map.</li>\n</ul>\n</li>\n<li>\n<p><strong>User Location</strong>:</p>\n\n<ul>\n<li>The <code>geolocation.watchPosition</code> API continuously tracks the user's location.</li>\n<li>A marker is created for the user and updated as their location changes.</li>\n</ul>\n</li>\n<li>\n<p><strong>Other Users' Locations</strong>:</p>\n\n<ul>\n<li>When the server broadcasts a new location (<code>newLocation</code>), a marker is created or updated for that user.</li>\n</ul>\n</li>\n<li>\n<p><strong>Socket.IO</strong>:</p>\n\n<ul>\n<li>The client sends the user's location to the server using <code>updateLocation</code>.</li>\n<li>The server broadcasts the location to all clients using <code>newLocation</code>.</li>\n</ul>\n</li>\n</ol>\n\n\n<h3>\n  \n  \n  <strong>8. Running the App</strong>\n</h3>\n\n<ol>\n<li>Start the server:\n</li>\n</ol>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   node server.js\n</code></pre>\n\n</div>\n\n\n<ol>\n<li><p>Open your browser and navigate to <code>http://localhost:3333</code>.</p></li>\n<li><p>Allow the browser to access your location. You should see your live location on the map.</p></li>\n<li><p>Open the app in another browser or device. You'll see both users' locations on the map in real-time.</p></li>\n</ol>\n\n\n<h3>\n  \n  \n  <strong>9. Example Output</strong>\n</h3>\n\n<ul>\n<li>The map will display your location with a \"My Location\" marker.</li>\n<li>Other users' locations will appear as markers labeled \"User [ID]\".</li>\n<li>The map will automatically center on your location.</li>\n</ul>\n\n\n<h3>\n  \n  \n  10. Understanding Socket.IO Events\n</h3>\n\n<ol>\n<li> Connection Event</li>\n</ol>\n\n<p>Every new user triggers the <code>connection</code> event.<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nf\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">connection</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">socket</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">A user connected</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n</code></pre>\n\n</div>\n\n\n<ol>\n<li>Emitting Events</li>\n</ol>\n\n<p>You can send data between the client and server using <code>socket.emit()</code>.<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">customEvent</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Hello, client!</span><span class=\"dl\">'</span> <span class=\"p\">});</span>\n\n</code></pre>\n\n</div>\n\n\n<ol>\n<li>Listening for Events</li>\n</ol>\n\n<p>The client can listen for events from the server using <code>socket.on()</code>.<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nf\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">customEvent</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n</code></pre>\n\n</div>\n\n\n<ol>\n<li>Broadcasting Messages</li>\n</ol>\n\n<p>To send a message to all connected clients except the sender:<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">broadcast</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">updateLocation</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">);</span>\n\n</code></pre>\n\n</div>\n\n\n<ol>\n<li>Handling Disconnections</li>\n</ol>\n\n<p>When a user leaves, handle the <code>disconnect</code> event:<br />\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nf\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">disconnect</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">User disconnected</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n</code></pre>\n\n</div>\n\n<h3>\n  \n  \n  11. Scaling Socket.IO Applications\n</h3>\n\n<p>For larger applications, consider:</p>\n\n<ul>\n<li>Using Redis for scaling WebSocket connections</li>\n<li>Implementing authentication for secure communication</li>\n<li>Handling rooms for group-based communication</li>\n<li>Deploying with Nginx for WebSocket support</li>\n</ul>\n\n\n\n\n<div class=\"ltag__link\">\n  <a class=\"ltag__link__link\" href=\"https://dev.to/mahmud-r-farhan\">\n    <div class=\"ltag__link__pic\">\n      <img alt=\"mahmud-r-farhan\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F2119935%2F08a7e3c9-cc06-43e3-ac8a-a80050bcca6e.jpg\" />\n    </div>\n  </a>\n  <a class=\"ltag__link__link\" href=\"https://dev.to/mahmud-r-farhan/realtime-location-tracker-2jbf\">\n    <div class=\"ltag__link__content\">\n      <h2>Realtime Location Tracker &amp; Communications</h2>\n      <h3>Mahmudur Rahman ・ Dec 20 '24</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#socket</span>\n        <span class=\"ltag__link__tag\">#javascript</span>\n        <span class=\"ltag__link__tag\">#github</span>\n        <span class=\"ltag__link__tag\">#location</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n\n\n\n\n<blockquote>\n<p>Follow for more!</p>\n</blockquote>"
    },
    {
      "title": "Top Career Opportunities After Completing AWS Training in Bangalore",
      "link": "https://dev.to/shaik_muskansultana_f054/top-career-opportunities-after-completing-aws-training-in-bangalore-3jlp",
      "published": "Sat, 08 Mar 2025 09:09:37 +0000",
      "author": "Shaik muskan Sultana",
      "tags": [
        "webdev",
        "aws",
        "cloud",
        "coding"
      ],
      "text": "Cloud computing is growing rapidly, and Amazon Web Services (AWS) is one of the most widely used cloud platforms in the world. Many businesses depend on AWS for their cloud solutions, creating a high demand for skilled AWS professionals.\n\nIf you have completed or are planning to take AWS training in Bangalore, you might be wondering what career opportunities are available. In this blog, we will explore the top job roles you can pursue after AWS training, the skills required, and how to build a successful career in cloud computing.\n\n## Why is AWS a Great Career Choice?\n\nAWS is the market leader in cloud computing, and companies of all sizes rely on AWS services. Here’s why learning AWS can help you build a great career:\n\n**High Demand: **Many companies need AWS professionals to manage their cloud infrastructure.\n\n**Good Salary Packages**: AWS-certified professionals earn higher salaries compared to other IT roles.\n\n**Job Security:** As businesses move to cloud computing, AWS jobs will continue to grow.\n\n**Global Recognition:** AWS skills are valued worldwide, giving you opportunities to work with international companies.\n\nIf you have completed AWS training in Bangalore, you are already on the right path to a successful career in cloud computing.\n\n## Top Career Opportunities After AWS Training\n\nAfter completing AWS training, you can explore various career paths based on your skills and interests. Let’s take a look at some of the best job opportunities.\n\n**1. AWS Cloud Engineer**\n\nWhat does an AWS Cloud Engineer do?\n\nDesigns, deploys, and manages cloud solutions using AWS services.\n\nMonitors cloud performance and security.\n\nTroubleshoots issues related to AWS infrastructure.\n\n**Skills Required:**\n\nAWS services like EC2, S3, and RDS.\n\nNetworking and security basics.\n\nHands-on experience with AWS tools.\n\nAWS Cloud Engineer is a great entry-level role for those who have completed an AWS training institute in Bangalore and want to start working in cloud computing.\n\n**2. AWS Solutions Architect**\n\nWhat does an AWS Solutions Architect do?\n\nDesigns scalable and secure cloud solutions for businesses.\n\nHelps organizations migrate their systems to AWS.\n\nEnsures that AWS solutions meet business needs.\n\n**Skills Required:**\n\nStrong knowledge of AWS services.\n\nCloud architecture design.\n\nSecurity best practices.\n\nTo get this job, you should complete the AWS Solution Architect Associate training and earn the AWS Solution Architect Associate Certification to validate your skills.\n\n**3. AWS DevOps Engineer**\n\nWhat does an AWS DevOps Engineer do?\n\nAutomates cloud processes using tools like Terraform and AWS CloudFormation.\n\nManages CI/CD pipelines to streamline software deployment.\n\nMonitors and optimizes cloud infrastructure.\n\n**Skills Required:**\n\nAWS DevOps tools like CodePipeline and CodeDeploy.\n\nScripting and automation (Python, Bash).\n\nExperience with Docker and Kubernetes.\n\nAWS DevOps Engineer is a great choice for those who enjoy automation and cloud security. Many companies in Bangalore look for AWS DevOps professionals to improve their cloud workflows.\n\n**4. AWS Security Specialist**\n\nWhat does an AWS Security Specialist do?\n\nProtects cloud infrastructure from security threats.\n\nImplements best security practices in AWS environments.\n\nConducts security audits and ensures compliance.\n\n**Skills Required:**\n\nAWS security services like IAM, AWS Shield, and WAF.\n\nCloud security best practices.\n\nCybersecurity certifications (optional but useful).\n\nIf you are interested in cybersecurity, this is a great career option after completing an AWS training and certification program.\n\n**5. AWS Data Engineer**\n\nWhat does an AWS Data Engineer do?\n\nManages and processes large amounts of data using AWS services.\n\nBuilds data pipelines and storage solutions.\n\nWorks with machine learning and analytics tools.\n\n**Skills Required:**\n\nAWS data services like Redshift, Athena, and Glue.\n\nSQL and database management.\n\nKnowledge of data warehousing.\n\nWith the rise of big data, AWS Data Engineers are in high demand. If you like working with data, this role is a great fit for you.\n\n**6. AWS Cloud Consultant**\n\nWhat does an AWS Cloud Consultant do?\n\nAdvises companies on how to use AWS effectively.\n\nHelps businesses reduce cloud costs and improve efficiency.\n\nDesigns custom AWS solutions based on client needs.\n\n**Skills Required:**\n\nStrong understanding of AWS services.\n\nGood communication and problem-solving skills.\n\nExperience with cloud migration strategies.\nAWS Cloud Consulting is a great role for those who enjoy working with clients and solving complex business problems.\n\n## How to Prepare for AWS Job Interviews\n\nAfter completing your AWS training in Bangalore, the next step is preparing for job interviews. Here are some tips to help you succeed:\n\n**1. Gain Hands-on Experience**\n\nEmployers prefer candidates with practical AWS experience. Work on real projects, set up your own AWS lab, and practice using different AWS services.\n\n**2. Build a Strong Resume**\n\nHighlight your AWS certifications, skills, and hands-on projects in your resume. Use platforms like LinkedIn to showcase your cloud expertise.\n\n**3. Practice Interview Questions**\n\nPrepare for common AWS interview questions, such as:\n\nExplain the difference between EC2 and Lambda.\n\nHow does AWS Auto Scaling work?\n\nWhat are the benefits of using AWS S3?\n\nMock interviews can help you feel more confident before the actual interview.\n\n## Why Choose Bangalore for AWS Training?\n\nBangalore is known as India’s IT hub and is home to many tech companies and startups. Here’s why it’s a great place to learn AWS:\n\nMany AWS training institutes offer hands-on courses with expert guidance.\n\nHigh job demand for cloud professionals in IT companies.\n\nNetworking opportunities with industry experts through tech events.\n\nFlexible learning options including classroom and online training.\n\nInstitutes like Eduleem provide structured AWS training in Bangalore that prepares students for industry challenges and job opportunities.\n\n## Conclusion\n\nCompleting an AWS training and certification program opens doors to many exciting career opportunities. Whether you want to become an AWS Cloud Engineer, Solutions Architect, DevOps Engineer, or Security Specialist, there are plenty of options to explore.\n\nBy gaining hands-on experience, earning certifications, and preparing for interviews, you can successfully start your AWS career. If you are looking for quality AWS training, Bangalore offers some of the best learning opportunities to help you achieve your goals.",
      "html": "<p>Cloud computing is growing rapidly, and Amazon Web Services (AWS) is one of the most widely used cloud platforms in the world. Many businesses depend on AWS for their cloud solutions, creating a high demand for skilled AWS professionals.</p>\n\n<p>If you have completed or are planning to take <a href=\"https://eduleem.com/aws-training-in-bangalore/\" rel=\"noopener noreferrer\">AWS training in Bangalore</a>, you might be wondering what career opportunities are available. In this blog, we will explore the top job roles you can pursue after AWS training, the skills required, and how to build a successful career in cloud computing.</p>\n\n<h2>\n  \n  \n  Why is AWS a Great Career Choice?\n</h2>\n\n<p>AWS is the market leader in cloud computing, and companies of all sizes rely on AWS services. Here’s why learning AWS can help you build a great career:</p>\n\n<ul>\n<li>**High Demand: **Many companies need AWS professionals to manage their cloud infrastructure.</li>\n<li>\n<strong>Good Salary Packages</strong>: AWS-certified professionals earn higher salaries compared to other IT roles.</li>\n<li>\n<strong>Job Security:</strong> As businesses move to cloud computing, AWS jobs will continue to grow.</li>\n<li>\n<strong>Global Recognition:</strong> AWS skills are valued worldwide, giving you opportunities to work with international companies.</li>\n</ul>\n\n<p>If you have completed AWS training in Bangalore, you are already on the right path to a successful career in cloud computing.</p>\n\n<h2>\n  \n  \n  Top Career Opportunities After AWS Training\n</h2>\n\n<p>After completing AWS training, you can explore various career paths based on your skills and interests. Let’s take a look at some of the best job opportunities.</p>\n\n<p><strong>1. AWS Cloud Engineer</strong><br />\nWhat does an AWS Cloud Engineer do?</p>\n\n<ul>\n<li>Designs, deploys, and manages cloud solutions using AWS services.</li>\n<li>Monitors cloud performance and security.</li>\n<li>Troubleshoots issues related to AWS infrastructure.</li>\n</ul>\n\n<p><strong>Skills Required:</strong></p>\n\n<ul>\n<li>AWS services like EC2, S3, and RDS.</li>\n<li>Networking and security basics.</li>\n<li>Hands-on experience with AWS tools.</li>\n</ul>\n\n<p>AWS Cloud Engineer is a great entry-level role for those who have completed an AWS training institute in Bangalore and want to start working in cloud computing.</p>\n\n<p><strong>2. AWS Solutions Architect</strong><br />\nWhat does an AWS Solutions Architect do?</p>\n\n<ul>\n<li>Designs scalable and secure cloud solutions for businesses.</li>\n<li>Helps organizations migrate their systems to AWS.</li>\n<li>Ensures that AWS solutions meet business needs.</li>\n</ul>\n\n<p><strong>Skills Required:</strong></p>\n\n<ul>\n<li>Strong knowledge of AWS services.</li>\n<li>Cloud architecture design.</li>\n<li>Security best practices.</li>\n</ul>\n\n<p>To get this job, you should complete the <a href=\"https://eduleem.com/aws-training-in-bangalore/\" rel=\"noopener noreferrer\">AWS Solution Architect Associate training</a> and earn the AWS Solution Architect Associate Certification to validate your skills.</p>\n\n<p><strong>3. AWS DevOps Engineer</strong><br />\nWhat does an AWS DevOps Engineer do?</p>\n\n<ul>\n<li>Automates cloud processes using tools like Terraform and AWS CloudFormation.</li>\n<li>Manages CI/CD pipelines to streamline software deployment.</li>\n<li>Monitors and optimizes cloud infrastructure.</li>\n</ul>\n\n<p><strong>Skills Required:</strong></p>\n\n<ul>\n<li>AWS DevOps tools like CodePipeline and CodeDeploy.</li>\n<li>Scripting and automation (Python, Bash).</li>\n<li>Experience with Docker and Kubernetes.</li>\n</ul>\n\n<p>AWS DevOps Engineer is a great choice for those who enjoy automation and cloud security. Many companies in Bangalore look for AWS DevOps professionals to improve their cloud workflows.</p>\n\n<p><strong>4. AWS Security Specialist</strong><br />\nWhat does an AWS Security Specialist do?</p>\n\n<ul>\n<li>Protects cloud infrastructure from security threats.</li>\n<li>Implements best security practices in AWS environments.</li>\n<li>Conducts security audits and ensures compliance.</li>\n</ul>\n\n<p><strong>Skills Required:</strong></p>\n\n<ul>\n<li>AWS security services like IAM, AWS Shield, and WAF.</li>\n<li>Cloud security best practices.</li>\n<li>Cybersecurity certifications (optional but useful).</li>\n</ul>\n\n<p>If you are interested in cybersecurity, this is a great career option after completing an AWS training and certification program.</p>\n\n<p><strong>5. AWS Data Engineer</strong><br />\nWhat does an AWS Data Engineer do?</p>\n\n<ul>\n<li>Manages and processes large amounts of data using AWS services.</li>\n<li>Builds data pipelines and storage solutions.</li>\n<li>Works with machine learning and analytics tools.</li>\n</ul>\n\n<p><strong>Skills Required:</strong></p>\n\n<ul>\n<li>AWS data services like Redshift, Athena, and Glue.</li>\n<li>SQL and database management.</li>\n<li>Knowledge of data warehousing.</li>\n</ul>\n\n<p>With the rise of big data, AWS Data Engineers are in high demand. If you like working with data, this role is a great fit for you.</p>\n\n<p><strong>6. AWS Cloud Consultant</strong><br />\nWhat does an AWS Cloud Consultant do?</p>\n\n<ul>\n<li>Advises companies on how to use AWS effectively.</li>\n<li>Helps businesses reduce cloud costs and improve efficiency.</li>\n<li>Designs custom AWS solutions based on client needs.</li>\n</ul>\n\n<p><strong>Skills Required:</strong></p>\n\n<ul>\n<li>Strong understanding of AWS services.</li>\n<li>Good communication and problem-solving skills.</li>\n<li>Experience with cloud migration strategies.\nAWS Cloud Consulting is a great role for those who enjoy working with clients and solving complex business problems.</li>\n</ul>\n\n<h2>\n  \n  \n  How to Prepare for AWS Job Interviews\n</h2>\n\n<p>After completing your AWS training in Bangalore, the next step is preparing for job interviews. Here are some tips to help you succeed:</p>\n\n<p><strong>1. Gain Hands-on Experience</strong><br />\nEmployers prefer candidates with practical AWS experience. Work on real projects, set up your own AWS lab, and practice using different AWS services.</p>\n\n<p><strong>2. Build a Strong Resume</strong><br />\nHighlight your AWS certifications, skills, and hands-on projects in your resume. Use platforms like LinkedIn to showcase your cloud expertise.</p>\n\n<p><strong>3. Practice Interview Questions</strong><br />\nPrepare for common AWS interview questions, such as:</p>\n\n<p>Explain the difference between EC2 and Lambda.</p>\n\n<ul>\n<li>How does AWS Auto Scaling work?</li>\n<li>What are the benefits of using AWS S3?</li>\n<li>Mock interviews can help you feel more confident before the actual interview.</li>\n</ul>\n\n<h2>\n  \n  \n  Why Choose Bangalore for AWS Training?\n</h2>\n\n<p>Bangalore is known as India’s IT hub and is home to many tech companies and startups. Here’s why it’s a great place to learn AWS:</p>\n\n<p>Many AWS training institutes offer hands-on courses with expert guidance.<br />\nHigh job demand for cloud professionals in IT companies.<br />\nNetworking opportunities with industry experts through tech events.<br />\nFlexible learning options including classroom and online training.<br />\nInstitutes like Eduleem provide structured AWS training in Bangalore that prepares students for industry challenges and job opportunities.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Completing an AWS training and certification program opens doors to many exciting career opportunities. Whether you want to become an AWS Cloud Engineer, Solutions Architect, DevOps Engineer, or Security Specialist, there are plenty of options to explore.</p>\n\n<p>By gaining hands-on experience, earning certifications, and preparing for interviews, you can successfully start your AWS career. If you are looking for quality <a href=\"https://eduleem.com/aws-training-in-bangalore/\" rel=\"noopener noreferrer\">AWS training, Bangalore</a> offers some of the best learning opportunities to help you achieve your goals.</p>"
    },
    {
      "title": "Odoo Database Migration: Module Not Installing After Upgrade",
      "link": "https://dev.to/james_scott_bf1d5c8cfcaa0/odoo-database-migration-module-not-installing-after-upgrade-26kg",
      "published": "Sat, 08 Mar 2025 09:05:59 +0000",
      "author": "James Scott",
      "tags": [
        "odoomigration",
        "odooupgrade",
        "moduleerrors",
        "database"
      ],
      "text": "**Question**\n\nAfter upgrading my Odoo instance, a custom module isn’t installing, and I get dependency errors. How do I resolve this?\n\n**Problem** \n\nWhen upgrading Odoo (e.g., from 14 to 16), custom modules can fail due to missing dependencies, API changes, or renamed fields.\n\n**Solution**\n\nCheck `__manifest__.py` for outdated dependencies.\n\nRun `odoo-bin -u all --stop-after-init` to force module updates.\n\nInspect logs for missing fields and update your migration scripts.\n\nIf necessary, remove orphaned database records manually:\n\n```\nDELETE FROM ir_model_data WHERE module = 'your_module' AND name = 'old_field';\n```\n\nFinally, restart Odoo and reinstall the module.\n\nBuild secure, scalable, and feature-rich platforms tailored to your business needs. From custom module development to multi-company management, get end-to-end solutions for your Odoo implementation project. Let’s streamline your business operations and drive efficiency with Odoo Implementation Services.",
      "html": "<p><strong>Question</strong></p>\n\n<p>After upgrading my Odoo instance, a custom module isn’t installing, and I get dependency errors. How do I resolve this?</p>\n\n<p><strong>Problem</strong> </p>\n\n<p>When upgrading Odoo (e.g., from 14 to 16), custom modules can fail due to missing dependencies, API changes, or renamed fields.</p>\n\n<p><strong>Solution</strong></p>\n\n<ul>\n<li>Check <code>__manifest__.py</code> for outdated dependencies.</li>\n<li>Run <code>odoo-bin -u all --stop-after-init</code> to force module updates.</li>\n<li>Inspect logs for missing fields and update your migration scripts.</li>\n<li>If necessary, remove orphaned database records manually:\n<code>sql</code>\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>DELETE FROM ir_model_data WHERE module = 'your_module' AND name = 'old_field';\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Finally, restart Odoo and reinstall the module.</li>\n</ul>\n\n<p>Build secure, scalable, and feature-rich platforms tailored to your business needs. From custom module development to multi-company management, get end-to-end solutions for your Odoo implementation project. Let’s streamline your business operations and drive efficiency with <a href=\"https://sdlccorp.com/services/odoo-services/odoo-implementation-services/\" rel=\"noopener noreferrer\">Odoo Implementation Services</a>.</p>"
    },
    {
      "title": "Crawl4AI: AI-Ready Web Crawling",
      "link": "https://dev.to/ali_dz/crawl4ai-the-ultimate-guide-to-ai-ready-web-crawling-2620",
      "published": "Sat, 08 Mar 2025 09:05:33 +0000",
      "author": "Ali Dadashzadeh",
      "tags": [
        "ai",
        "chatgpt",
        "python",
        "webscraping"
      ],
      "text": "Crawl4AI is an open-source, LLM-friendly web crawler and scraper built to empower developers with fast, efficient, and customizable data extraction capabilities. Whether you’re building retrieval-augmented generation (RAG) pipelines or integrating web data into AI agents, Crawl4AI is designed to handle modern web challenges like dynamic content and high concurrency. In this guide, we’ll cover everything from installation to advanced usage—all with real code examples and references.\n\n## What Is Crawl4AI?\n\nCrawl4AI is a versatile tool for:\n\n**Extracting Clean Markdown & Structured Data:** Automatically converts HTML into Markdown, JSON, or raw HTML.\n\n**LLM Integration:** Offers both traditional CSS/XPath extraction and LLM-based strategies for complex content.\n\n**Asynchronous Processing:** Leverages concurrency to crawl multiple pages in parallel.\n\n**Customization & Flexibility:** Fine-tune browser behavior (headless mode, user agent, proxy, etc.) and extraction strategies.\n\nIts key features make it ideal for data pipelines, AI agents, and real-time web scraping applications.\n\n**References:**\n\nCrawl4AI Documentation\n\nCrawl4AI on GitHub\n\n## Step 1: Installation & Setup\n\n### Using Pip\n\nInstall Crawl4AI and its core dependencies using pip:\n\n```\npip install \"crawl4ai @ git+https://github.com/unclecode/crawl4ai.git\" transformers torch nltk\n```\n\nDon’t forget to export your OpenAI API key (if you plan to use LLM-based extraction):\n\n```\nexport OPENAI_API_KEY='your_api_key_here'\n```\n\n### Using Docker\n\nFor a containerized setup—ideal for scaling or quick deployments—you can build and run the official Docker image. For example:\n\n**Clone the Repository:**\n\n```\ngit clone https://github.com/unclecode/crawl4ai.git\n cd crawl4ai\n```\n\n**Build the Docker Image:**\n\n```\ndocker build -f Dockerfile -t crawl4ai:latest --build-arg INSTALL_TYPE=all .\n```\n\n**Run the Container:**\n\n```\ndocker run -p 11235:11235 -e OPENAI_API_KEY=<your-api-key> crawl4ai:latest\n```\n\n**Reference:**\n\nCrawl4AI Docker Setup Tutorial\n\n## Step 2: Your First Crawl\n\nLet’s start with a simple Python script to perform a basic crawl and generate Markdown output.\n\n```\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler\n\nasync def main():\n async with AsyncWebCrawler() as crawler:\n # Fetch a webpage and convert its HTML to Markdown\n result = await crawler.arun(\"https://example.com\")\n print(result.markdown[:300]) # Print first 300 characters\n\nif __name__ == \"__main__\":\n asyncio.run(main())\n```\n\nThis script initializes an asynchronous crawler, fetches the content from \"https://example.com\", and prints the first part of the generated Markdown. It’s a minimal example to get you started.\n\n## Step 3: Basic Configuration & Customization\n\nCrawl4AI provides configurable classes to fine-tune both the browser behavior and the crawling process:\n\n**BrowserConfig:** Adjust settings like headless mode, user agent, or JavaScript execution.\n\n**CrawlerRunConfig:** Manage caching, extraction strategies, and timeouts.\n\nHere’s an example that customizes the browser to run in headless mode and bypasses cache for fresh content:\n\n```\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode\n\nasync def main():\n browser_conf = BrowserConfig(headless=True) # Use headless mode\n run_conf = CrawlerRunConfig(cache_mode=CacheMode.BYPASS)\n\n async with AsyncWebCrawler(config=browser_conf) as crawler:\n result = await crawler.arun(\"https://example.com\", config=run_conf)\n print(result.markdown)\n\nif __name__ == \"__main__\":\n asyncio.run(main())\n```\n\n**Reference:**\n\nCrawl4AI Documentation – Core Concepts\n\n## Step 4: Data Extraction Techniques\n\nCrawl4AI supports multiple extraction strategies. Here, we cover both CSS-based and LLM-based methods.\n\n### CSS-Based Extraction\n\nExtract structured data with simple CSS selectors:\n\n```\nimport asyncio\nimport json\nfrom crawl4ai import AsyncWebCrawler, CrawlerRunConfig, CacheMode\nfrom crawl4ai.extraction_strategy import JsonCssExtractionStrategy\n\nasync def main():\n schema = {\n \"name\": \"Products\",\n \"baseSelector\": \"div.product\",\n \"fields\": [\n {\"name\": \"title\", \"selector\": \"h2\", \"type\": \"text\"},\n {\"name\": \"price\", \"selector\": \".price\", \"type\": \"text\"}\n ]\n }\n\n async with AsyncWebCrawler() as crawler:\n result = await crawler.arun(\n url=\"https://example.com/products\",\n config=CrawlerRunConfig(\n cache_mode=CacheMode.BYPASS,\n extraction_strategy=JsonCssExtractionStrategy(schema)\n )\n )\n data = json.loads(result.extracted_content)\n print(data)\n\nif __name__ == \"__main__\":\n asyncio.run(main())\n```\n\n### LLM-Based Extraction\n\nFor more complex pages, you can leverage an LLM to intelligently extract data. Define a Pydantic model for your schema and use the LLM extraction strategy:\n\n```\nimport os\nimport asyncio\nfrom pydantic import BaseModel, Field\nfrom crawl4ai import AsyncWebCrawler, CrawlerRunConfig\nfrom crawl4ai.extraction_strategy import LLMExtractionStrategy\n\nclass Product(BaseModel):\n name: str = Field(..., description=\"Product name\")\n price: str = Field(..., description=\"Product price\")\n\nasync def main():\n async with AsyncWebCrawler() as crawler:\n result = await crawler.arun(\n url=\"https://example.com/products\",\n config=CrawlerRunConfig(\n cache_mode=\"BYPASS\",\n extraction_strategy=LLMExtractionStrategy(\n provider=\"openai/gpt-4o\",\n api_token=os.getenv(\"OPENAI_API_KEY\"),\n schema=Product.schema(),\n extraction_type=\"schema\",\n instruction=\"Extract product name and price from the page.\"\n )\n )\n )\n print(result.extracted_content)\n\nif __name__ == \"__main__\":\n asyncio.run(main())\n```\n\n**Reference:**\n\nCrawl4AI LLM Extraction Tutorial\n\n## Step 5: Multi-URL Concurrency & Dynamic Content\n\n### Multi-URL Crawling\n\nCrawl4AI can crawl multiple pages concurrently using the `arun_many()` method. This is especially useful for scraping large websites or aggregating data:\n\n```\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler, CrawlerRunConfig, CacheMode\n\nasync def parallel_crawl():\n urls = [\n \"https://example.com/page1\",\n \"https://example.com/page2\",\n \"https://example.com/page3\"\n ]\n run_conf = CrawlerRunConfig(cache_mode=CacheMode.BYPASS, stream=True)\n\n async with AsyncWebCrawler() as crawler:\n async for result in await crawler.arun_many(urls, config=run_conf):\n if result.success:\n print(f\"URL: {result.url} - Markdown length: {len(result.markdown.raw_markdown)}\")\n else:\n print(f\"Error crawling {result.url}: {result.error_message}\")\n\nif __name__ == \"__main__\":\n asyncio.run(parallel_crawl())\n```\n\n### Handling Dynamic Content\n\nFor websites that load data via JavaScript (e.g., “Load More” buttons), you can inject custom JavaScript to simulate user interactions:\n\n```\nimport asyncio\nfrom crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode\n\nasync def dynamic_crawl():\n browser_conf = BrowserConfig(headless=True, java_script_enabled=True)\n js_code = \"\"\"\n (async () => {\n const loadMore = document.querySelector(\"#load-more-button\");\n if (loadMore) {\n loadMore.click();\n await new Promise(resolve => setTimeout(resolve, 2000));\n }\n })();\n \"\"\"\n run_conf = CrawlerRunConfig(\n cache_mode=CacheMode.BYPASS,\n js_code=[js_code]\n )\n\n async with AsyncWebCrawler(config=browser_conf) as crawler:\n result = await crawler.arun(\"https://example.com/dynamic-content\", config=run_conf)\n print(result.markdown)\n\nif __name__ == \"__main__\":\n asyncio.run(dynamic_crawl())\n```\n\n**Reference:**\n\nCrawl4AI YouTube Tutorial\n\n## Advanced Usage: Integrating with AI Agents\n\nCrawl4AI isn’t just for standalone web scraping—it’s built to integrate seamlessly with AI agents. With its flexible extraction strategies, you can create pipelines that:\n\nScrape raw data from multiple sources.\n\nStructure and clean data using custom schemas.\n\nFeed structured data directly into AI models for further analysis.\n\nFor a deep dive into integrating Crawl4AI with AI workflows, check out additional resources on Medium or Revanth Quick Learn for practical examples.\n\n## Conclusion\n\nCrawl4AI is a game changer for anyone looking to harness web data in an AI-driven world. In this post, we covered:\n\n**Installation:** Get started using pip or Docker.\n\n**Basic Crawling:** A simple script to convert HTML to Markdown.\n\n**Customization:** Configure browser and crawler parameters for optimal performance.\n\n**Data Extraction:** Use CSS or LLM-based strategies for structured data.\n\n**Advanced Use Cases:** Concurrency, dynamic content handling, and AI agent integration.\n\nBy leveraging Crawl4AI, you can build robust data pipelines, enhance AI models with fresh data, and unlock new possibilities for automation. Happy crawling!\n\n## References & Useful Links\n\nCrawl4AI Documentation\n\nCrawl4AI GitHub Repository\n\nYouTube: Crawl4AI Tutorial",
      "html": "<p>Crawl4AI is an open-source, LLM-friendly web crawler and scraper built to empower developers with fast, efficient, and customizable data extraction capabilities. Whether you’re building retrieval-augmented generation (RAG) pipelines or integrating web data into AI agents, Crawl4AI is designed to handle modern web challenges like dynamic content and high concurrency. In this guide, we’ll cover everything from installation to advanced usage—all with real code examples and references.</p>\n\n<h2>\n  \n  \n  What Is Crawl4AI?\n</h2>\n\n<p>Crawl4AI is a versatile tool for:</p>\n\n<ul>\n<li>\n<strong>Extracting Clean Markdown &amp; Structured Data:</strong> Automatically converts HTML into Markdown, JSON, or raw HTML.</li>\n<li>\n<strong>LLM Integration:</strong> Offers both traditional CSS/XPath extraction and LLM-based strategies for complex content.</li>\n<li>\n<strong>Asynchronous Processing:</strong> Leverages concurrency to crawl multiple pages in parallel.</li>\n<li>\n<strong>Customization &amp; Flexibility:</strong> Fine-tune browser behavior (headless mode, user agent, proxy, etc.) and extraction strategies.</li>\n</ul>\n\n<p>Its key features make it ideal for data pipelines, AI agents, and real-time web scraping applications.</p>\n\n<blockquote>\n<p><strong>References:</strong><br /><br />\n<a href=\"https://docs.crawl4ai.com/\" rel=\"noopener noreferrer\">Crawl4AI Documentation</a><br />\n<a href=\"https://github.com/unclecode/crawl4ai\" rel=\"noopener noreferrer\">Crawl4AI on GitHub</a></p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  Step 1: Installation &amp; Setup\n</h2>\n\n<h3>\n  \n  \n  Using Pip\n</h3>\n\n<p>Install Crawl4AI and its core dependencies using pip:<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install</span> <span class=\"s2\">\"crawl4ai @ git+https://github.com/unclecode/crawl4ai.git\"</span> transformers torch nltk\n</code></pre>\n\n</div>\n\n\n\n<p>Don’t forget to export your OpenAI API key (if you plan to use LLM-based extraction):<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">export </span><span class=\"nv\">OPENAI_API_KEY</span><span class=\"o\">=</span><span class=\"s1\">'your_api_key_here'</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Using Docker\n</h3>\n\n<p>For a containerized setup—ideal for scaling or quick deployments—you can build and run the official Docker image. For example:</p>\n\n<ol>\n<li>\n<strong>Clone the Repository:</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   git clone https://github.com/unclecode/crawl4ai.git\n   <span class=\"nb\">cd </span>crawl4ai\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Build the Docker Image:</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   docker build <span class=\"nt\">-f</span> Dockerfile <span class=\"nt\">-t</span> crawl4ai:latest <span class=\"nt\">--build-arg</span> <span class=\"nv\">INSTALL_TYPE</span><span class=\"o\">=</span>all <span class=\"nb\">.</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Run the Container:</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>   docker run <span class=\"nt\">-p</span> 11235:11235 <span class=\"nt\">-e</span> <span class=\"nv\">OPENAI_API_KEY</span><span class=\"o\">=</span>&lt;your-api-key&gt; crawl4ai:latest\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p><strong>Reference:</strong><br /><br />\n<a href=\"https://www.youtube.com/watch?v=c5dw_jsGNBk\" rel=\"noopener noreferrer\">Crawl4AI Docker Setup Tutorial</a></p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  Step 2: Your First Crawl\n</h2>\n\n<p>Let’s start with a simple Python script to perform a basic crawl and generate Markdown output.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncWebCrawler</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncWebCrawler</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">crawler</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Fetch a webpage and convert its HTML to Markdown\n</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">crawler</span><span class=\"p\">.</span><span class=\"nf\">arun</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">markdown</span><span class=\"p\">[:</span><span class=\"mi\">300</span><span class=\"p\">])</span>  <span class=\"c1\"># Print first 300 characters\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This script initializes an asynchronous crawler, fetches the content from \"<a href=\"https://example.com\" rel=\"noopener noreferrer\">https://example.com</a>\", and prints the first part of the generated Markdown. It’s a minimal example to get you started.</p>\n\n\n\n\n<h2>\n  \n  \n  Step 3: Basic Configuration &amp; Customization\n</h2>\n\n<p>Crawl4AI provides configurable classes to fine-tune both the browser behavior and the crawling process:</p>\n\n<ul>\n<li>\n<strong>BrowserConfig:</strong> Adjust settings like headless mode, user agent, or JavaScript execution.</li>\n<li>\n<strong>CrawlerRunConfig:</strong> Manage caching, extraction strategies, and timeouts.</li>\n</ul>\n\n<p>Here’s an example that customizes the browser to run in headless mode and bypasses cache for fresh content:<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncWebCrawler</span><span class=\"p\">,</span> <span class=\"n\">BrowserConfig</span><span class=\"p\">,</span> <span class=\"n\">CrawlerRunConfig</span><span class=\"p\">,</span> <span class=\"n\">CacheMode</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">browser_conf</span> <span class=\"o\">=</span> <span class=\"nc\">BrowserConfig</span><span class=\"p\">(</span><span class=\"n\">headless</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Use headless mode\n</span>    <span class=\"n\">run_conf</span> <span class=\"o\">=</span> <span class=\"nc\">CrawlerRunConfig</span><span class=\"p\">(</span><span class=\"n\">cache_mode</span><span class=\"o\">=</span><span class=\"n\">CacheMode</span><span class=\"p\">.</span><span class=\"n\">BYPASS</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncWebCrawler</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">browser_conf</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">crawler</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">crawler</span><span class=\"p\">.</span><span class=\"nf\">arun</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">run_conf</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">markdown</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p><strong>Reference:</strong><br /><br />\n<a href=\"https://docs.crawl4ai.com/core/\" rel=\"noopener noreferrer\">Crawl4AI Documentation – Core Concepts</a></p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  Step 4: Data Extraction Techniques\n</h2>\n\n<p>Crawl4AI supports multiple extraction strategies. Here, we cover both CSS-based and LLM-based methods.</p>\n\n<h3>\n  \n  \n  CSS-Based Extraction\n</h3>\n\n<p>Extract structured data with simple CSS selectors:<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncWebCrawler</span><span class=\"p\">,</span> <span class=\"n\">CrawlerRunConfig</span><span class=\"p\">,</span> <span class=\"n\">CacheMode</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai.extraction_strategy</span> <span class=\"kn\">import</span> <span class=\"n\">JsonCssExtractionStrategy</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Products</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">baseSelector</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">div.product</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">fields</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">selector</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">h2</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">price</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">selector</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">.price</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncWebCrawler</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">crawler</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">crawler</span><span class=\"p\">.</span><span class=\"nf\">arun</span><span class=\"p\">(</span>\n            <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com/products</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"nc\">CrawlerRunConfig</span><span class=\"p\">(</span>\n                <span class=\"n\">cache_mode</span><span class=\"o\">=</span><span class=\"n\">CacheMode</span><span class=\"p\">.</span><span class=\"n\">BYPASS</span><span class=\"p\">,</span>\n                <span class=\"n\">extraction_strategy</span><span class=\"o\">=</span><span class=\"nc\">JsonCssExtractionStrategy</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">extracted_content</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  LLM-Based Extraction\n</h3>\n\n<p>For more complex pages, you can leverage an LLM to intelligently extract data. Define a Pydantic model for your schema and use the LLM extraction strategy:<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncWebCrawler</span><span class=\"p\">,</span> <span class=\"n\">CrawlerRunConfig</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai.extraction_strategy</span> <span class=\"kn\">import</span> <span class=\"n\">LLMExtractionStrategy</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Product</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Field</span><span class=\"p\">(...,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Product name</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">price</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Field</span><span class=\"p\">(...,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Product price</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncWebCrawler</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">crawler</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">crawler</span><span class=\"p\">.</span><span class=\"nf\">arun</span><span class=\"p\">(</span>\n            <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com/products</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"nc\">CrawlerRunConfig</span><span class=\"p\">(</span>\n                <span class=\"n\">cache_mode</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">BYPASS</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">extraction_strategy</span><span class=\"o\">=</span><span class=\"nc\">LLMExtractionStrategy</span><span class=\"p\">(</span>\n                    <span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">openai/gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">api_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n                    <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"nf\">schema</span><span class=\"p\">(),</span>\n                    <span class=\"n\">extraction_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">schema</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">instruction</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Extract product name and price from the page.</span><span class=\"sh\">\"</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">extracted_content</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p><strong>Reference:</strong><br /><br />\n<a href=\"https://medium.com/@honeyricky1m3/crawl4ai-automating-web-crawling-and-data-extraction-for-ai-agents-33c9c7ecfa26\" rel=\"noopener noreferrer\">Crawl4AI LLM Extraction Tutorial</a></p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  Step 5: Multi-URL Concurrency &amp; Dynamic Content\n</h2>\n\n<h3>\n  \n  \n  Multi-URL Crawling\n</h3>\n\n<p>Crawl4AI can crawl multiple pages concurrently using the <code>arun_many()</code> method. This is especially useful for scraping large websites or aggregating data:<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncWebCrawler</span><span class=\"p\">,</span> <span class=\"n\">CrawlerRunConfig</span><span class=\"p\">,</span> <span class=\"n\">CacheMode</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">parallel_crawl</span><span class=\"p\">():</span>\n    <span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"sh\">\"</span><span class=\"s\">https://example.com/page1</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">https://example.com/page2</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">https://example.com/page3</span><span class=\"sh\">\"</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">run_conf</span> <span class=\"o\">=</span> <span class=\"nc\">CrawlerRunConfig</span><span class=\"p\">(</span><span class=\"n\">cache_mode</span><span class=\"o\">=</span><span class=\"n\">CacheMode</span><span class=\"p\">.</span><span class=\"n\">BYPASS</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncWebCrawler</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">crawler</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"k\">await</span> <span class=\"n\">crawler</span><span class=\"p\">.</span><span class=\"nf\">arun_many</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">run_conf</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">success</span><span class=\"p\">:</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">URL: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"s\"> - Markdown length: </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">markdown</span><span class=\"p\">.</span><span class=\"n\">raw_markdown</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error crawling </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">error_message</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">parallel_crawl</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Handling Dynamic Content\n</h3>\n\n<p>For websites that load data via JavaScript (e.g., “Load More” buttons), you can inject custom JavaScript to simulate user interactions:<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">crawl4ai</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncWebCrawler</span><span class=\"p\">,</span> <span class=\"n\">BrowserConfig</span><span class=\"p\">,</span> <span class=\"n\">CrawlerRunConfig</span><span class=\"p\">,</span> <span class=\"n\">CacheMode</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">dynamic_crawl</span><span class=\"p\">():</span>\n    <span class=\"n\">browser_conf</span> <span class=\"o\">=</span> <span class=\"nc\">BrowserConfig</span><span class=\"p\">(</span><span class=\"n\">headless</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">java_script_enabled</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">js_code</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    (async () =&gt; {\n        const loadMore = document.querySelector(</span><span class=\"sh\">\"</span><span class=\"s\">#load-more-button</span><span class=\"sh\">\"</span><span class=\"s\">);\n        if (loadMore) {\n            loadMore.click();\n            await new Promise(resolve =&gt; setTimeout(resolve, 2000));\n        }\n    })();\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">run_conf</span> <span class=\"o\">=</span> <span class=\"nc\">CrawlerRunConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">cache_mode</span><span class=\"o\">=</span><span class=\"n\">CacheMode</span><span class=\"p\">.</span><span class=\"n\">BYPASS</span><span class=\"p\">,</span>\n        <span class=\"n\">js_code</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">js_code</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncWebCrawler</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">browser_conf</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">crawler</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">crawler</span><span class=\"p\">.</span><span class=\"nf\">arun</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com/dynamic-content</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">run_conf</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">markdown</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">dynamic_crawl</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p><strong>Reference:</strong><br /><br />\n<a href=\"https://www.youtube.com/watch?v=KAvuVUh0XU8\" rel=\"noopener noreferrer\">Crawl4AI YouTube Tutorial</a></p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  Advanced Usage: Integrating with AI Agents\n</h2>\n\n<p>Crawl4AI isn’t just for standalone web scraping—it’s built to integrate seamlessly with AI agents. With its flexible extraction strategies, you can create pipelines that:</p>\n\n<ul>\n<li>Scrape raw data from multiple sources.</li>\n<li>Structure and clean data using custom schemas.</li>\n<li>Feed structured data directly into AI models for further analysis.</li>\n</ul>\n\n<p>For a deep dive into integrating Crawl4AI with AI workflows, check out additional resources on <a href=\"https://medium.com/@honeyricky1m3/crawl4ai-automating-web-crawling-and-data-extraction-for-ai-agents-33c9c7ecfa26\" rel=\"noopener noreferrer\">Medium</a> or <a href=\"https://www.revanthquicklearn.com/post/exploring-crawl4ai-enhancing-ai-agents-with-advanced-web-crawling-and-scraping-capabilities\" rel=\"noopener noreferrer\">Revanth Quick Learn</a> for practical examples.</p>\n\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Crawl4AI is a game changer for anyone looking to harness web data in an AI-driven world. In this post, we covered:</p>\n\n<ul>\n<li>\n<strong>Installation:</strong> Get started using pip or Docker.</li>\n<li>\n<strong>Basic Crawling:</strong> A simple script to convert HTML to Markdown.</li>\n<li>\n<strong>Customization:</strong> Configure browser and crawler parameters for optimal performance.</li>\n<li>\n<strong>Data Extraction:</strong> Use CSS or LLM-based strategies for structured data.</li>\n<li>\n<strong>Advanced Use Cases:</strong> Concurrency, dynamic content handling, and AI agent integration.</li>\n</ul>\n\n<p>By leveraging Crawl4AI, you can build robust data pipelines, enhance AI models with fresh data, and unlock new possibilities for automation. Happy crawling!</p>\n\n\n\n\n<h2>\n  \n  \n  References &amp; Useful Links\n</h2>\n\n<ul>\n<li><a href=\"https://docs.crawl4ai.com/\" rel=\"noopener noreferrer\">Crawl4AI Documentation</a></li>\n<li><a href=\"https://github.com/unclecode/crawl4ai\" rel=\"noopener noreferrer\">Crawl4AI GitHub Repository</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=KAvuVUh0XU8\" rel=\"noopener noreferrer\">YouTube: Crawl4AI Tutorial</a></li>\n</ul>"
    }
  ]
}